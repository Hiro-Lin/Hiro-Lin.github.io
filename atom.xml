<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://hiro-lin.github.io/atom.xml" rel="self"/>
  
  <link href="https://hiro-lin.github.io/"/>
  <updated>2023-03-07T14:16:17.187Z</updated>
  <id>https://hiro-lin.github.io/</id>
  
  <author>
    <name>林多鱼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lua table 结构</title>
    <link href="https://hiro-lin.github.io/2023/03/07/lua-table-%E7%BB%93%E6%9E%84/"/>
    <id>https://hiro-lin.github.io/2023/03/07/lua-table-%E7%BB%93%E6%9E%84/</id>
    <published>2023-03-07T14:15:21.000Z</published>
    <updated>2023-03-07T14:16:17.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">-- 初始化表</span><br><span class="line">mytable = &#123;&#125;</span><br><span class="line">-- 指定值</span><br><span class="line">mytable[<span class="number">1</span>] = <span class="string">&quot;lua&quot;</span></span><br><span class="line">-- 移除引用</span><br><span class="line">mytable = nil</span><br><span class="line">-- lua 垃圾回收会释放内存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 简单的 table</span><br><span class="line">mytable = &#123;&#125;</span><br><span class="line">print(<span class="string">&quot;mytable 的类型是 &quot;</span>,type(mytable))</span><br><span class="line"></span><br><span class="line">mytable[<span class="number">1</span>]= <span class="string">&quot;Lua&quot;</span></span><br><span class="line">mytable[<span class="string">&quot;wow&quot;</span>] = <span class="string">&quot;修改前&quot;</span></span><br><span class="line">print(<span class="string">&quot;mytable 索引为 1 的元素是 &quot;</span>, mytable[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">&quot;mytable 索引为 wow 的元素是 &quot;</span>, mytable[<span class="string">&quot;wow&quot;</span>])</span><br><span class="line"></span><br><span class="line">-- alternatetable和mytable的是指同一个 table</span><br><span class="line">alternatetable = mytable</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;alternatetable 索引为 1 的元素是 &quot;</span>, alternatetable[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">&quot;alternatetable 索引为 wow 的元素是 &quot;</span>, alternatetable[<span class="string">&quot;wow&quot;</span>])</span><br><span class="line"></span><br><span class="line">alternatetable[<span class="string">&quot;wow&quot;</span>] = <span class="string">&quot;修改后&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;mytable 索引为 wow 的元素是 &quot;</span>, mytable[<span class="string">&quot;wow&quot;</span>])</span><br><span class="line"></span><br><span class="line">-- 释放变量</span><br><span class="line">alternatetable = nil</span><br><span class="line">print(<span class="string">&quot;alternatetable 是 &quot;</span>, alternatetable)</span><br><span class="line"></span><br><span class="line">-- mytable 仍然可以访问</span><br><span class="line">print(<span class="string">&quot;mytable 索引为 wow 的元素是 &quot;</span>, mytable[<span class="string">&quot;wow&quot;</span>])</span><br><span class="line"></span><br><span class="line">mytable = nil</span><br><span class="line">print(<span class="string">&quot;mytable 是 &quot;</span>, mytable)</span><br></pre></td></tr></table></figure><h1 id="Table-操作"><a href="#Table-操作" class="headerlink" title="Table 操作"></a>Table 操作</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">table.concat(table[,sep[,start[,end]]])</span><br><span class="line">-- concat是concatenate(连锁, 连接)的缩写. table.concat()函数列出参数中指定table的数组部分从start位置到end位置的所有元素, 元素间以指定的分隔符(sep)隔开。</span><br><span class="line"></span><br><span class="line">fruits = &#123;<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line">-- 返回 table 连接后的字符串</span><br><span class="line">print(<span class="string">&quot;连接后的字符串 &quot;</span>,table.concat(fruits))</span><br><span class="line"></span><br><span class="line">-- 指定连接字符</span><br><span class="line">print(<span class="string">&quot;连接后的字符串 &quot;</span>,table.concat(fruits,<span class="string">&quot;, &quot;</span>))</span><br><span class="line"></span><br><span class="line">-- 指定索引来连接 table</span><br><span class="line">print(<span class="string">&quot;连接后的字符串 &quot;</span>,table.concat(fruits,<span class="string">&quot;, &quot;</span>, <span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">table.insert (table, [pos,] value)</span><br><span class="line">-- 在table的数组部分指定位置(pos)插入值为value的一个元素. pos参数可选, 默认为数组部分末尾.</span><br><span class="line"></span><br><span class="line">table.remove (table [, pos])</span><br><span class="line">-- 返回table数组部分位于pos位置的元素. 其后的元素会被前移. pos参数可选, 默认为table长度, 即从最后一个元素删起。</span><br><span class="line">fruits = &#123;<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">-- 在末尾插入</span><br><span class="line">table.insert(fruits,<span class="string">&quot;mango&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;索引为 4 的元素为 &quot;</span>,fruits[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">-- 在索引为 <span class="number">2</span> 的键处插入</span><br><span class="line">table.insert(fruits,<span class="number">2</span>,<span class="string">&quot;grapes&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;索引为 2 的元素为 &quot;</span>,fruits[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;最后一个元素为 &quot;</span>,fruits[<span class="number">5</span>])</span><br><span class="line">table.remove(fruits)</span><br><span class="line">print(<span class="string">&quot;移除后最后一个元素为 &quot;</span>,fruits[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">table.sort (table [, comp])</span><br><span class="line">-- 对给定的table进行升序排序。</span><br><span class="line"></span><br><span class="line">fruits = &#123;<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;grapes&quot;</span>&#125;</span><br><span class="line">print(<span class="string">&quot;排序前&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k,v in ipairs(fruits) <span class="keyword">do</span></span><br><span class="line">        print(k,v)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">table.sort(fruits)</span><br><span class="line">print(<span class="string">&quot;排序后&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k,v in ipairs(fruits) <span class="keyword">do</span></span><br><span class="line">        print(k,v)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h1 id="Table-遍历"><a href="#Table-遍历" class="headerlink" title="Table 遍历"></a>Table 遍历</h1><p>数组类型的 table 可以通过 ipairs 来遍历，而字典类型或者混合类型只能通过 pairs 遍历。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p><em>当我们获取 table 的长度的时候无论是使用 # 还是 table.getn 其都会在索引中断的地方停止计数，而导致无法正确取得 table 的长度。</em></p><p>&amp;#x20;# 获取 table 长度时，只能获取到 table 数组结构中的长度，不能获取到 table 字典类型的长度。</p><p>table 数组中存在 nil 值时，也会影响 # 来获取其长度。</p><p><em>可以使用以下方法来代替：</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">table_leng</span><span class="params">(t)</span></span><br><span class="line">  local leng=<span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> k, v in <span class="title function_">pairs</span><span class="params">(t)</span> <span class="keyword">do</span></span><br><span class="line">    leng=leng+<span class="number">1</span></span><br><span class="line">  end</span><br><span class="line">  <span class="keyword">return</span> leng;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    
    <category term="lua" scheme="https://hiro-lin.github.io/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>go常见面试题</title>
    <link href="https://hiro-lin.github.io/2023/02/11/go%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://hiro-lin.github.io/2023/02/11/go%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2023-02-10T18:07:32.000Z</published>
    <updated>2023-02-11T07:49:25.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题1"><a href="#面试题1" class="headerlink" title="面试题1"></a>面试题1</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p><strong>01 &#x3D; 和 :&#x3D; 的区别？</strong></p><p>&#x3D;是赋值变量，:&#x3D;是定义变量。</p><p><strong>02 指针的作用</strong></p><p>一个指针可以指向任意变量的地址，它所指向的地址在32位或64位机器上分别固定占4或8个字节。指针的作用有：</p><p>获取变量的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import fmt</span><br><span class="line">func main()&#123;</span><br><span class="line">    a := 1</span><br><span class="line">    p := &amp;a//取址&amp;</span><br><span class="line">    fmt.Printf(&quot;%d\n&quot;, *p);//取值*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变变量的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 交换函数</span><br><span class="line">func swap(a, b *int) &#123;</span><br><span class="line">    *a, *b = *b, *a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用指针替代值传入函数，比如类的接收器就是这样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type A struct&#123;&#125;</span><br><span class="line">​</span><br><span class="line">func (a *A) fun()&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>03 Go 允许多个返回值吗？</strong></p><p>可以。通常函数除了一般返回值还会返回一个error。</p><p><strong>04 Go 有异常类型吗？</strong></p><p>有。Go用error类型代替try…catch语句，这样可以节省资源。同时增加代码可读性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_, err := funcDemo()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用errors.New()来定义自己的异常。errors.Error()会返回异常的字符串表示。只要实现error接口就可以定义自己的异常，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type errorString struct &#123;</span><br><span class="line">    s string</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">func (e *errorString) Error() string &#123;</span><br><span class="line">    return e.s</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">// 多一个函数当作构造函数</span><br><span class="line">func New(text string) error &#123;</span><br><span class="line">    return &amp;errorString&#123;text&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>05 什么是协程（Goroutine）</strong></p><p>协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。</p><p><strong>06 ❤ 如何高效地拼接字符串</strong></p><p>拼接字符串的方式有：+ , fmt.Sprintf , strings.Builder, bytes.Buffer, strings.Join</p><p>1 “+”</p><p>使用+操作符进行拼接时，会对字符串进行遍历，计算并开辟一个新的空间来存储原来的两个字符串。</p><p>2 fmt.Sprintf</p><p>由于采用了接口参数，必须要用反射获取值，因此有性能损耗。</p><p>3 strings.Builder：</p><p>用WriteString()进行拼接，内部实现是指针+切片，同时String()返回拼接后的字符串，它是直接把[]byte转换为string，从而避免变量拷贝。</p><p>4 bytes.Buffer</p><p>bytes.Buffer是一个一个缓冲byte类型的缓冲器，这个缓冲器里存放着都是byte，</p><p>bytes.buffer底层也是一个[]byte切片。</p><p>5 strings.join</p><p>strings.join也是基于strings.builder来实现的,并且可以自定义分隔符，在join方法内调用了b.Grow(n)方法，这个是进行初步的容量分配，而前面计算的n的长度就是我们要拼接的slice的长度，因为我们传入切片长度固定，所以提前进行容量分配可以减少内存分配，很高效。</p><p>性能比较：</p><p>strings.Join ≈ strings.Builder &gt; bytes.Buffer &gt; “+” &gt; fmt.Sprintf</p><p>5种拼接方法的实例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">a := []string&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span><br><span class="line">//方式1：+</span><br><span class="line">ret := a[0] + a[1] + a[2]</span><br><span class="line">//方式2：fmt.Sprintf</span><br><span class="line">ret := fmt.Sprintf(&quot;%s%s%s&quot;, a[0],a[1],a[2])</span><br><span class="line">//方式3：strings.Builder</span><br><span class="line">var sb strings.Builder</span><br><span class="line">sb.WriteString(a[0])</span><br><span class="line">sb.WriteString(a[1])</span><br><span class="line">sb.WriteString(a[2])</span><br><span class="line">ret := sb.String()</span><br><span class="line">//方式4：bytes.Buffer</span><br><span class="line">buf := new(bytes.Buffer)</span><br><span class="line">buf.Write(a[0])</span><br><span class="line">buf.Write(a[1])</span><br><span class="line">buf.Write(a[2])</span><br><span class="line">ret := buf.String()</span><br><span class="line">//方式5：strings.Join</span><br><span class="line">ret := strings.Join(a,&quot;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>07 什么是 rune 类型</strong></p><p>ASCII 码只需要 7 bit 就可以完整地表示，但只能表示英文字母在内的128个字符，为了表示世界上大部分的文字系统，发明了 Unicode， 它是ASCII的超集，包含世界上书写系统中存在的所有字符，并为每个代码分配一个标准编号（称为Unicode CodePoint），在 Go 语言中称之为 rune，是 int32 类型的别名。</p><p>Go 语言中，字符串的底层表示是 byte (8 bit) 序列，而非 rune (32 bit) 序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sample := &quot;我爱GO&quot;</span><br><span class="line">runeSamp := []rune(sample)</span><br><span class="line">runeSamp[0] = &#x27;你&#x27;</span><br><span class="line">fmt.Println(string(runeSamp))  // &quot;你爱GO&quot;</span><br><span class="line">fmt.Println(len(runeSamp))  // 4</span><br></pre></td></tr></table></figure><p><strong>08 如何判断 map 中是否包含某个 key ？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var sample map[int]int</span><br><span class="line">if _, ok := sample[10]; ok &#123;</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>09 Go 支持默认参数或可选参数吗？</strong></p><p>不支持。但是可以利用结构体参数，或者…传入参数切片数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 这个函数可以传入任意数量的整型参数</span><br><span class="line">func sum(nums ...int) &#123;</span><br><span class="line">    total := 0</span><br><span class="line">    for _, num := range nums &#123;</span><br><span class="line">        total += num</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(total)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>10 defer 的执行顺序</strong></p><p>defer执行顺序和调用顺序相反，类似于栈后进先出(LIFO)。</p><p>defer在return之后执行，但在函数退出之前，defer可以修改返回值。下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func test() int &#123;</span><br><span class="line">i := 0</span><br><span class="line">defer func() &#123;</span><br><span class="line">fmt.Println(&quot;defer1&quot;)</span><br><span class="line">&#125;()</span><br><span class="line">defer func() &#123;</span><br><span class="line">i += 1</span><br><span class="line">fmt.Println(&quot;defer2&quot;)</span><br><span class="line">&#125;()</span><br><span class="line">return i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;return&quot;, test())</span><br><span class="line">&#125;</span><br><span class="line">// defer2</span><br><span class="line">// defer1</span><br><span class="line">// return 0</span><br></pre></td></tr></table></figure><p>上面这个例子中，test返回值并没有修改，这是由于Go的返回机制决定的，执行Return语句后，Go会创建一个临时变量保存返回值。如果是有名返回（也就是指明返回值func test() (i int)）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func test() (i int) &#123;</span><br><span class="line">i = 0</span><br><span class="line">defer func() &#123;</span><br><span class="line">i += 1</span><br><span class="line">fmt.Println(&quot;defer2&quot;)</span><br><span class="line">&#125;()</span><br><span class="line">return i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;return&quot;, test())</span><br><span class="line">&#125;</span><br><span class="line">// defer2</span><br><span class="line">// return 1</span><br></pre></td></tr></table></figure><p>这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。</p><p><strong>11 如何交换 2 个变量的值？</strong></p><p>对于变量而言a,b &#x3D; b,a； 对于指针而言*a,*b &#x3D; *b, *a</p><p><strong>12 Go 语言 tag 的用处？</strong></p><p>tag可以为结构体成员提供属性。常见的：</p><p>json序列化或反序列化时字段的名称<br>db: sqlx模块中对应的数据库字段名<br>form: gin框架中对应的前端的数据字段名<br>binding: 搭配 form 使用, 默认如果没查找到结构体中的某个字段则不报错值为空, binding为 required 代表没找到返回错误给前端</p><p><strong>13 如何获取一个结构体的所有tag？</strong></p><p>利用反射：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import reflect</span><br><span class="line">type Author struct &#123;</span><br><span class="line">Name         int      `json:Name`</span><br><span class="line">Publications []string `json:Publication,omitempty`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">t := reflect.TypeOf(Author&#123;&#125;)</span><br><span class="line">for i := 0; i &lt; t.NumField(); i++ &#123;</span><br><span class="line">name := t.Field(i).Name</span><br><span class="line">s, _ := t.FieldByName(name)</span><br><span class="line">fmt.Println(name, s.Tag)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子中，reflect.TypeOf方法获取对象的类型，之后NumField()获取结构体成员的数量。 通过Field(i)获取第i个成员的名字。 再通过其Tag 方法获得标签。</p><p><strong>14 如何判断 2 个字符串切片（slice) 是相等的？</strong></p><p>reflect.DeepEqual() ， 但反射非常影响性能。</p><p><strong>15 结构体打印时，%v 和 %+v 的区别</strong></p><p>%v输出结构体各成员的值；</p><p>%+v输出结构体各成员的名称和值；</p><p>%#v输出结构体名称和结构体各成员的名称和值</p><p><strong>16 Go 语言中如何表示枚举值(enums)？</strong></p><p>在常量中用iota可以表示枚举。iota从0开始。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">B = 1 &lt;&lt; (10 * iota)</span><br><span class="line">KiB </span><br><span class="line">MiB</span><br><span class="line">GiB</span><br><span class="line">TiB</span><br><span class="line">PiB</span><br><span class="line">EiB</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>17 空 struct{} 的用途</strong></p><p>用map模拟一个set，那么就要把值置为struct{}，struct{}本身不占任何空间，可以避免任何多余的内存分配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type Set map[string]struct&#123;&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">set := make(Set)</span><br><span class="line"></span><br><span class="line">for _, item := range []string&#123;&quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125; &#123;</span><br><span class="line">set[item] = struct&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(len(set)) // 3</span><br><span class="line">if _, ok := set[&quot;A&quot;]; ok &#123;</span><br><span class="line">fmt.Println(&quot;A exists&quot;) // A exists</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时候给通道发送一个空结构体,channel&lt;-struct{}{}，也是节省了空间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">ch := make(chan struct&#123;&#125;, 1)</span><br><span class="line">go func() &#123;</span><br><span class="line">&lt;-ch</span><br><span class="line">// do something</span><br><span class="line">&#125;()</span><br><span class="line">ch &lt;- struct&#123;&#125;&#123;&#125;</span><br><span class="line">// ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅有方法的结构体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Lamp struct&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>18 go里面的int和int32是同一个概念吗？</strong></p><p>不是一个概念！千万不能混淆。go语言中的int的大小是和操作系统位数相关的，如果是32位操作系统，int类型的大小就是4字节。如果是64位操作系统，int类型的大小就是8个字节。除此之外uint也与操作系统有关。</p><p>int8占1个字节，int16占2个字节，int32占4个字节，int64占8个字节。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><strong>01 init() 函数是什么时候执行的？</strong></p><p>简答： 在main函数之前执行。</p><p>详细：init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。</p><p>每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。init()函数没有入参和返回值，不能被其他函数调用，同一个包内多个init()函数的执行顺序不作保证。</p><p>执行顺序：import –&gt; const –&gt; var –&gt;init()–&gt;main()</p><p>一个文件可以有多个init()函数！</p><p><strong>02 ❤如何知道一个对象是分配在栈上还是堆上？</strong></p><p>Go和C++不同，Go局部变量会进行逃逸分析。如果变量离开作用域后没有被引用，则优先分配到栈上，否则分配到堆上。那么如何判断是否发生了逃逸呢？</p><p>go build -gcflags ‘-m -m -l’ xxx.go.</p><p>关于逃逸的可能情况：变量大小不确定，变量类型不确定，变量分配的内存超过用户栈最大值，暴露给了外部指针。</p><p><strong>03 2 个 interface 可以比较吗 ？</strong></p><p>Go 语言中，interface 的内部实现包含了 2 个字段，类型 T 和 值 V，interface 可以使用 &#x3D;&#x3D; 或 !&#x3D; 比较。2 个 interface 相等有以下 2 种情况</p><p>两个 interface 均等于 nil（此时 V 和 T 都处于 unset 状态）<br>类型 T 相同，且对应的值 V 相等。<br>看下面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type Stu struct &#123;</span><br><span class="line">     Name string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type StuInt interface&#123;&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">     var stu1, stu2 StuInt = &amp;Stu&#123;&quot;Tom&quot;&#125;, &amp;Stu&#123;&quot;Tom&quot;&#125;</span><br><span class="line">     var stu3, stu4 StuInt = Stu&#123;&quot;Tom&quot;&#125;, Stu&#123;&quot;Tom&quot;&#125;</span><br><span class="line">     fmt.Println(stu1 == stu2) // false</span><br><span class="line">     fmt.Println(stu3 == stu4) // true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stu1 和 stu2 对应的类型是 *Stu，值是 Stu 结构体的地址，两个地址不同，因此结果为 false。<br>stu3 和 stu4 对应的类型是 Stu，值是 Stu 结构体，且各字段相等，因此结果为 true。</p><p><strong>04 2 个 nil 可能不相等吗？</strong></p><p>可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var p *int = nil</span><br><span class="line">var i interface&#123;&#125; = nil</span><br><span class="line">if(p == i)&#123;</span><br><span class="line">fmt.Println(&quot;Equal&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两者并不相同。总结：两个nil只有在类型相同时才相等。</p><p><strong>05 ❤简述 Go 语言GC(垃圾回收)的工作原理</strong></p><p>垃圾回收机制是Go一大特(nan)色(dian)。Go1.3采用标记清除法， Go1.5采用三色标记法，Go1.8采用三色标记法+混合写屏障。</p><p>标记清除法</p><p>分为两个阶段：标记和清除</p><p>标记阶段：从根对象出发寻找并标记所有存活的对象。</p><p>清除阶段：遍历堆中的对象，回收未标记的对象，并加入空闲链表。</p><p>缺点是需要暂停程序STW。</p><p>三色标记法：</p><p>将对象标记为白色，灰色或黑色。</p><p>白色：不确定对象（默认色）；黑色：存活对象。灰色：存活对象，子对象待处理。</p><p>标记开始时，先将所有对象加入白色集合（需要STW）。首先将根对象标记为灰色，然后将一个对象从灰色集合取出，遍历其子对象，放入灰色集合。同时将取出的对象放入黑色集合，直到灰色集合为空。最后的白色集合对象就是需要清理的对象。</p><p>这种方法有一个缺陷，如果对象的引用被用户修改了，那么之前的标记就无效了。因此Go采用了写屏障技术，当对象新增或者更新会将其着色为灰色。</p><p>一次完整的GC分为四个阶段：</p><p>准备标记（需要STW），开启写屏障。<br>开始标记<br>标记结束（STW），关闭写屏障<br>清理（并发）<br>基于插入写屏障和删除写屏障在结束时需要STW来重新扫描栈，带来性能瓶颈。混合写屏障分为以下四步：</p><p>GC开始时，将栈上的全部对象标记为黑色（不需要二次扫描，无需STW）；<br>GC期间，任何栈上创建的新对象均为黑色<br>被删除引用的对象标记为灰色<br>被添加引用的对象标记为灰色<br>总而言之就是确保黑色对象不能引用白色对象，这个改进直接使得GC时间从 2s降低到2us。</p><p><strong>06 函数返回局部变量的指针是否安全？</strong></p><p>这一点和C++不同，在Go里面返回局部变量的指针是安全的。因为Go会进行逃逸分析，如果发现局部变量的作用域超过该函数则会把指针分配到堆区，避免内存泄漏。</p><p>*<em>07 非接口的任意类型 T() 都能够调用 <em>T 的方法吗？反过来呢？</em></em></p><p>一个T类型的值可以调用*T类型声明的方法，当且仅当T是可寻址的。</p><p>反之：*T 可以调用T()的方法，因为指针可以解引用。</p><p><strong>08 go slice是怎么扩容的？</strong></p><p>Go &lt;&#x3D; 1.17</p><p>如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。</p><p>如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap&#x2F;4。</p><p>Go1.18之后，引入了新的扩容规则：浅谈 Go 1.18.1的切片扩容机制</p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p><strong>01 ❤无缓冲的 channel 和有缓冲的 channel 的区别？</strong></p><p>（这个问题笔者也纠结了很久，直到看到一篇文章，阻塞与否是分别针对发送接收方而言的，才茅塞顿开）</p><p>对于无缓冲区channel：</p><p>发送的数据如果没有被接收方接收，那么发送方阻塞；如果一直接收不到发送方的数据，接收方阻塞；</p><p>有缓冲的channel：</p><p>发送方在缓冲区满的时候阻塞，接收方不阻塞；接收方在缓冲区为空的时候阻塞，发送方不阻塞。</p><p>可以类比生产者与消费者问题。</p><p><strong>02 为什么有协程泄露(Goroutine Leak)？</strong></p><p>协程泄漏是指协程创建之后没有得到释放。主要原因有：</p><p>缺少接收器，导致发送阻塞<br>缺少发送器，导致接收阻塞<br>死锁。多个协程由于竞争资源导致死锁。<br>创建协程的没有回收。</p><p><strong>03 Go 可以限制运行时操作系统线程的数量吗？ 常见的goroutine操作函数有哪些？</strong></p><p>可以，使用runtime.GOMAXPROCS(num int)可以设置线程数目。该值默认为CPU逻辑核数，如果设的太大，会引起频繁的线程切换，降低性能。</p><p>runtime.Gosched()，用于让出CPU时间片，让出当前goroutine的执行权限，调度器安排其它等待的任务运行，并在下次某个时候从该位置恢复执行。<br>runtime.Goexit()，调用此函数会立即使当前的goroutine的运行终止（终止协程），而其它的goroutine并不会受此影响。runtime.Goexit在终止当前goroutine前会先执行此goroutine的还未执行的defer语句。请注意千万别在主函数调用runtime.Goexit，因为会引发panic。</p><p><strong>04 如何控制协程数目。</strong></p><p>The GOMAXPROCS variable limits the number of operating system threads that can execute user-level Go code simultaneously. There is no limit to the number of threads that can be blocked in system calls on behalf of Go code; those do not count against the GOMAXPROCS limit.<br>从官方文档的解释可以看到，GOMAXPROCS 限制的是同时执行用户态 Go 代码的操作系统线程的数量，但是对于被系统调用阻塞的线程数量是没有限制的。GOMAXPROCS 的默认值等于 CPU 的逻辑核数，同一时间，一个核只能绑定一个线程，然后运行被调度的协程。因此对于 CPU 密集型的任务，若该值过大，例如设置为 CPU 逻辑核数的 2 倍，会增加线程切换的开销，降低性能。对于 I&#x2F;O 密集型应用，适当地调大该值，可以提高 I&#x2F;O 吞吐率。</p><p>另外对于协程，可以用带缓冲区的channel来控制，下面的例子是协程数为1024的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var wg sync.WaitGroup</span><br><span class="line">ch := make(chan struct&#123;&#125;, 1024)</span><br><span class="line">for i:=0; i&lt;20000; i++&#123;</span><br><span class="line">wg.Add(1)</span><br><span class="line">ch&lt;-struct&#123;&#125;&#123;&#125;</span><br><span class="line">go func()&#123;</span><br><span class="line">defer wg.Done()</span><br><span class="line">&lt;-ch</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><p>此外还可以用协程池：其原理无外乎是将上述代码中通道和协程函数解耦，并封装成单独的结构体。常见第三方协程池库，比如tunny等。</p><p>面试题评价：★★★☆☆。偏容易和基础。分为基础语法、实现原理、并发编程三个大部分，需要读者有扎实的基础。</p><h1 id="面试题2"><a href="#面试题2" class="headerlink" title="面试题2"></a>面试题2</h1><p><strong>❤new和make的区别？</strong></p><p>new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&amp;T{}<br>make只可用于slice,map,channel的初始化,返回的是引用。</p><p><strong>请你讲一下Go面向对象是如何实现的？</strong></p><p>Go实现面向对象的两个关键是struct和interface。</p><p>封装：对于同一个包，对象对包内的文件可见；对不同的包，需要将对象以大写开头才是可见的。</p><p>继承：继承是编译时特征，在struct内加入所需要继承的类即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type A struct&#123;&#125;</span><br><span class="line">type B struct&#123;</span><br><span class="line">    A</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态：多态是运行时特征，Go多态通过interface来实现。类型和接口是松耦合的，某个类型的实例可以赋给它所实现的任意接口类型的变量。</p><p>Go支持多重继承，就是在类型中嵌入所有必要的父类型。</p><p>uint型变量值分别为 1，2，它们相减的结果是多少？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a uint = 1</span><br><span class="line">var b uint = 2</span><br><span class="line">fmt.Println(a - b)</span><br></pre></td></tr></table></figure><p>答案，结果会溢出，如果是32位系统，结果是2^32-1，如果是64位系统，结果2^64-1.</p><p>讲一下go有没有函数在main之前执行？怎么用？</p><p>go的init函数在main函数之前执行，它有如下特点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func init() &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>init函数非常特殊：</p><p>初始化不能采用初始化表达式初始化的变量；<br>程序运行前执行注册<br>实现sync.Once功能<br>不能被其它函数调用<br>init函数没有入口参数和返回值：<br>每个包可以有多个init函数，每个源文件也可以有多个init函数。<br>同一个包的init执行顺序，golang没有明确定义，编程时要注意程序不要依赖这个执行顺序。<br>不同包的init函数按照包导入的依赖关系决定执行顺序。</p><p>下面这句代码是什么作用，为什么要定义一个空值？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type GobCodec struct&#123;</span><br><span class="line">conn io.ReadWriteCloser</span><br><span class="line">buf *bufio.Writer</span><br><span class="line">dec *gob.Decoder</span><br><span class="line">enc *gob.Encoder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Codec interface &#123;</span><br><span class="line">io.Closer</span><br><span class="line">ReadHeader(*Header) error</span><br><span class="line">ReadBody(interface&#123;&#125;)  error</span><br><span class="line">Write(*Header, interface&#123;&#125;) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>var _ Codec &#x3D; (*GobCodec)(nil)</p><p>答：将nil转换为<em>GobCodec类型，然后再转换为Codec接口，如果转换失败，说明</em>GobCodec没有实现Codec接口的所有方法。</p><p><strong>❤golang的内存管理的原理清楚吗？简述go内存管理机制。</strong></p><p>golang内存管理基本是参考tcmalloc来进行的。go内存管理本质上是一个内存池，只不过内部做了很多优化：自动伸缩内存池大小，合理的切割内存块。</p><p>一些基本概念：</p><p>页Page：一块8K大小的内存空间。Go向操作系统申请和释放内存都是以页为单位的。</p><p>span : 内存块，一个或多个连续的 page 组成一个 span 。如果把 page 比喻成工人， span 可看成是小队，工人被分成若干个队伍，不同的队伍干不同的活。</p><p>sizeclass : 空间规格，每个 span 都带有一个 sizeclass ，标记着该 span 中的 page 应该如何使用。使用上面的比喻，就是 sizeclass 标志着 span 是一个什么样的队伍。</p><p>object : 对象，用来存储一个变量数据内存空间，一个 span 在初始化时，会被切割成一堆等大的 object 。假设 object 的大小是 16B ， span 大小是 8K ，那么就会把 span 中的 page 就会被初始化 8K &#x2F; 16B &#x3D; 512 个 object 。所谓内存分配，就是分配一个 object 出去。</p><p>mheap</p><p>一开始go从操作系统索取一大块内存作为内存池，并放在一个叫mheap的内存池进行管理，mheap将一整块内存切割为不同的区域，并将一部分内存切割为合适的大小。</p><p>mheap.spans ：用来存储 page 和 span 信息，比如一个 span 的起始地址是多少，有几个 page，已使用了多大等等。</p><p>mheap.bitmap 存储着各个 span 中对象的标记信息，比如对象是否可回收等等。</p><p>mheap.arena_start : 将要分配给应用程序使用的空间。</p><p>mcentral</p><p>用途相同的span会以链表的形式组织在一起存放在mcentral中。这里用途用sizeclass来表示，就是该span存储哪种大小的对象。</p><p>找到合适的 span 后，会从中取一个 object 返回给上层使用。</p><p>mcache</p><p>为了提高内存并发申请效率，加入缓存层mcache。每一个mcache和处理器P对应。Go申请内存首先从P的mcache中分配，如果没有可用的span再从mcentral中获取。</p><p><strong>❤mutex有几种模式？</strong></p><p>mutex有两种模式：normal 和 starvation</p><p>正常模式</p><p>所有goroutine按照FIFO的顺序进行锁获取，被唤醒的goroutine和新请求锁的goroutine同时进行锁获取，通常新请求锁的goroutine更容易获取锁(持续占有cpu)，被唤醒的goroutine则不容易获取到锁。公平性：否。</p><p>饥饿模式</p><p>所有尝试获取锁的goroutine进行等待排队，新请求锁的goroutine不会进行锁获取(禁用自旋)，而是加入队列尾部等待获取锁。公平性：是。</p><p>参考链接：Go Mutex 饥饿模式，GO 互斥锁（Mutex）原理</p><p>面试题3</p><p><strong>❤go如何进行调度的。GMP中状态流转。</strong></p><p>Go里面GMP分别代表：G：goroutine，M：线程（真正在CPU上跑的），P：调度器。</p><p>GMP模型</p><p>调度器是M和G之间桥梁。</p><p>go进行调度过程：</p><p>某个线程尝试创建一个新的G，那么这个G就会被安排到这个线程的G本地队列LRQ中，如果LRQ满了，就会分配到全局队列GRQ中；<br>尝试获取当前线程的M，如果无法获取，就会从空闲的M列表中找一个，如果空闲列表也没有，那么就创建一个M，然后绑定G与P运行。<br>进入调度循环：<br>找到一个合适的G<br>执行G，完成以后退出</p><p><strong>Go什么时候发生阻塞？阻塞时，调度器会怎么做。</strong></p><p>用于原子、互斥量或通道操作导致goroutine阻塞，调度器将把当前阻塞的goroutine从本地运行队列LRQ换出，并重新调度其它goroutine；<br>由于网络请求和IO导致的阻塞，Go提供了网络轮询器（Netpoller）来处理，后台用epoll等技术实现IO多路复用。<br>其它回答：</p><p>channel阻塞：当goroutine读写channel发生阻塞时，会调用gopark函数，该G脱离当前的M和P，调度器将新的G放入当前M。<br>系统调用：当某个G由于系统调用陷入内核态，该P就会脱离当前M，此时P会更新自己的状态为Psyscall，M与G相互绑定，进行系统调用。结束以后，若该P状态还是Psyscall，则直接关联该M和G，否则使用闲置的处理器处理该G。<br>系统监控：当某个G在P上运行的时间超过10ms时候，或者P处于Psyscall状态过长等情况就会调用retake函数，触发新的调度。<br>主动让出：由于是协作式调度，该G会主动让出当前的P（通过GoSched），更新状态为Grunnable，该P会调度队列中的G运行。<br>更多关于netpoller的内容可以参看：<a href="https://strikefreedom.top/go-netpoll-io-multiplexing-reactor">https://strikefreedom.top/go-netpoll-io-multiplexing-reactor</a></p><p><strong>❤Go中GMP有哪些状态？</strong></p><p>G的状态：</p><p>_Gidle：刚刚被分配并且还没有被初始化，值为0，为创建goroutine后的默认值</p><p>_Grunnable： 没有执行代码，没有栈的所有权，存储在运行队列中，可能在某个P的本地队列或全局队列中(如上图)。</p><p>_Grunning： 正在执行代码的goroutine，拥有栈的所有权(如上图)。</p><p>_Gsyscall：正在执行系统调用，拥有栈的所有权，与P脱离，但是与某个M绑定，会在调用结束后被分配到运行队列(如上图)。</p><p>_Gwaiting：被阻塞的goroutine，阻塞在某个channel的发送或者接收队列(如上图)。</p><p>_Gdead： 当前goroutine未被使用，没有执行代码，可能有分配的栈，分布在空闲列表gFree，可能是一个刚刚初始化的goroutine，也可能是执行了goexit退出的goroutine(如上图)。</p><p>_Gcopystac：栈正在被拷贝，没有执行代码，不在运行队列上，执行权在</p><p>_Gscan ： GC 正在扫描栈空间，没有执行代码，可以与其他状态同时存在。</p><p>P的状态：</p><p>_Pidle ：处理器没有运行用户代码或者调度器，被空闲队列或者改变其状态的结构持有，运行队列为空</p><p>_Prunning ：被线程 M 持有，并且正在执行用户代码或者调度器(如上图)</p><p>_Psyscall：没有执行用户代码，当前线程陷入系统调用(如上图)</p><p>_Pgcstop ：被线程 M 持有，当前处理器由于垃圾回收被停止</p><p>_Pdead ：当前处理器已经不被使用</p><p>M的状态：</p><p>自旋线程：处于运行状态但是没有可执行goroutine的线程，数量最多为GOMAXPROC，若是数量大于GOMAXPROC就会进入休眠。</p><p>非自旋线程：处于运行状态有可执行goroutine的线程。</p><p><strong>GMP能不能去掉P层？会怎么样？</strong></p><p>P层的作用</p><p>每个 P 有自己的本地队列，大幅度的减轻了对全局队列的直接依赖，所带来的效果就是锁竞争的减少。而 GM 模型的性能开销大头就是锁竞争。<br>每个 P 相对的平衡上，在 GMP 模型中也实现了 Work Stealing 算法，如果 P 的本地队列为空，则会从全局队列或其他 P 的本地队列中窃取可运行的 G 来运行，减少空转，提高了资源利用率。<br>参考资料：<a href="https://juejin.cn/post/6968311281220583454">https://juejin.cn/post/6968311281220583454</a></p><p>如果有一个G一直占用资源怎么办？什么是work stealing算法？</p><p>如果有个goroutine一直占用资源，那么GMP模型会从正常模式转变为饥饿模式（类似于mutex），允许其它goroutine使用work stealing抢占（禁用自旋锁）。</p><p>work stealing算法指，一个线程如果处于空闲状态，则帮其它正在忙的线程分担压力，从全局队列取一个G任务来执行，可以极大提高执行效率。</p><p><strong>goroutine什么情况会发生内存泄漏？如何避免。</strong></p><p>在Go中内存泄露分为暂时性内存泄露和永久性内存泄露。</p><p>暂时性内存泄露</p><p>获取长字符串中的一段导致长字符串未释放<br>获取长slice中的一段导致长slice未释放<br>在长slice新建slice导致泄漏<br>string相比切片少了一个容量的cap字段，可以把string当成一个只读的切片类型。获取长string或者切片中的一段内容，由于新生成的对象和老的string或者切片共用一个内存空间，会导致老的string和切片资源暂时得不到释放，造成短暂的内存泄漏</p><p>永久性内存泄露</p><p>goroutine永久阻塞而导致泄漏<br>time.Ticker未关闭导致泄漏<br>不正确使用Finalizer（Go版本的析构函数）导致泄漏</p><p><strong>Go GC有几个阶段</strong></p><p>目前的go GC采用三色标记法和混合写屏障技术。</p><p>Go GC有四个阶段:</p><p>STW，开启混合写屏障，扫描栈对象；<br>将所有对象加入白色集合，从根对象开始，将其放入灰色集合。每次从灰色集合取出一个对象标记为黑色，然后遍历其子对象，标记为灰色，放入灰色集合；<br>如此循环直到灰色集合为空。剩余的白色对象就是需要清理的对象。<br>STW，关闭混合写屏障；<br>在后台进行GC（并发）。</p><p><strong>go竞态条件了解吗？</strong></p><p>所谓竞态竞争，就是当两个或以上的goroutine访问相同资源时候，对资源进行读&#x2F;写。</p><p>比如var a int &#x3D; 0，有两个协程分别对a+&#x3D;1，我们发现最后a不一定为2.这就是竞态竞争。</p><p>通常我们可以用go run -race xx.go来进行检测。</p><p>解决方法是，对临界区资源上锁，或者使用原子操作(atomics)，原子操作的开销小于上锁。</p><p><strong>如果若干个goroutine，有一个panic会怎么做？</strong></p><p>有一个panic，那么剩余goroutine也会退出，程序退出。如果不想程序退出，那么必须通过调用 recover() 方法来捕获 panic 并恢复将要崩掉的程序。</p><p>参考理解：goroutine配上panic会怎样。</p><p><strong>defer可以捕获goroutine的子goroutine吗？</strong></p><p>不可以。它们处于不同的调度器P中。对于子goroutine，必须通过 recover() 机制来进行恢复，然后结合日志进行打印（或者通过channel传递error），下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 心跳函数</span><br><span class="line">func Ping(ctx context.Context) error &#123;</span><br><span class="line">    ... code ...</span><br><span class="line"> </span><br><span class="line">go func() &#123;</span><br><span class="line">defer func() &#123;</span><br><span class="line">if r := recover(); r != nil &#123;</span><br><span class="line">log.Errorc(ctx, &quot;ping panic: %v, stack: %v&quot;, r, string(debug.Stack()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"> </span><br><span class="line">        ... code ...</span><br><span class="line">&#125;()</span><br><span class="line"> </span><br><span class="line">    ... code ...</span><br><span class="line"> </span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>❤gRPC是什么？</strong></p><p>基于go的远程过程调用。RPC 框架的目标就是让远程服务调用更加简单、透明，RPC 框架负责屏蔽底层的传输方式（TCP 或者 UDP）、序列化方式（XML&#x2F;Json&#x2F; 二进制）和通信细节。服务调用者可以像调用本地接口一样调用远程的服务提供者，而不需要关心底层通信细节和调用过程。</p><p>gRPC框架图</p><h1 id="面试题4"><a href="#面试题4" class="headerlink" title="面试题4"></a>面试题4</h1><p>需要面试者有一定的大型项目经验经验，了解使用微服务，etcd，gin，gorm，gRPC等典型框架等模型或框架。</p><p><strong>微服务了解吗？</strong></p><p>微服务是一种开发软件的架构和组织方法，其中软件由通过明确定义的 API 进行通信的小型独立服务组成。微服务架构使应用程序更易于扩展和更快地开发，从而加速创新并缩短新功能的上市时间。</p><p>微服务示意图<br>微服务有着自主，专用，灵活性等优点。</p><p>参考资料：什么是微服务？| AWS</p><p><strong>服务发现是怎么做的？</strong></p><p>主要有两种服务发现机制：客户端发现和服务端发现。</p><p>客户端发现模式：当我们使用客户端发现的时候，客户端负责决定可用服务实例的网络地址并且在集群中对请求负载均衡, 客户端访问服务登记表，也就是一个可用服务的数据库，然后客户端使用一种负载均衡算法选择一个可用的服务实例然后发起请求。该模式如下图所示：</p><p>客户端发现模式<br>服务端发现模式：客户端通过负载均衡器向某个服务提出请求，负载均衡器查询服务注册表，并将请求转发到可用的服务实例。如同客户端发现，服务实例在服务注册表中注册或注销。</p><p>服务端发现模式</p><p>参考资料：「Chris Richardson 微服务系列」服务发现的可行方案以及实践案例</p><p>ETCD用过吗？<br>etcd是一个高度一致的分布式键值存储，它提供了一种可靠的方式来存储需要由分布式系统或机器集群访问的数据。它可以优雅地处理网络分区期间的领导者选举，即使在领导者节点中也可以容忍机器故障。</p><p>etcd 是用Go语言编写的，它具有出色的跨平台支持，小的二进制文件和强大的社区。etcd机器之间的通信通过Raft共识算法处理。</p><p>关于文档可以参考：v3.5 docs</p><p>GIN怎么做参数校验？<br>go采用validator作参数校验。</p><p>它具有以下独特功能：</p><p>使用验证tag或自定义validator进行跨字段Field和跨结构体验证。<br>允许切片、数组和哈希表，多维字段的任何或所有级别进行校验。<br>能够对哈希表key和value进行验证<br>通过在验证之前确定它的基础类型来处理类型接口。<br>别名验证标签，允许将多个验证映射到单个标签，以便更轻松地定义结构体上的验证<br>gin web 框架的默认验证器；<br>参考资料：validator package - pkg.go.dev</p><p>中间件用过吗？<br>Middleware是Web的重要组成部分，中间件（通常）是一小段代码，它们接受一个请求，对其进行处理，每个中间件只处理一件事情，完成后将其传递给另一个中间件或最终处理程序，这样就做到了程序的解耦。</p><p>Go解析Tag是怎么实现的？<br>Go解析tag采用的是反射。</p><p>具体来说使用reflect.ValueOf方法获取其反射值，然后获取其Type属性，之后再通过Field(i)获取第i+1个field，再.Tag获得Tag。</p><p>反射实现的原理在: <code>src/reflect/type.go</code>中</p><p>你项目有优雅的启停吗？<br>所谓「优雅」启停就是在启动退出服务时要满足以下几个条件：</p><p>不可以关闭现有连接（进程）<br>新的进程启动并「接管」旧进程<br>连接要随时响应用户请求，不可以出现拒绝请求的情况<br>停止的时候，必须处理完既有连接，并且停止接收新的连接。<br>为此我们必须引用信号来完成这些目的：</p><p>启动：</p><p>监听SIGHUP（在用户终端连接(正常或非正常)结束时发出）；<br>收到信号后将服务监听的文件描述符传递给新的子进程，此时新老进程同时接收请求；<br>退出：</p><p>监听SIGINT和SIGSTP和SIGQUIT等。<br>父进程停止接收新请求，等待旧请求完成（或超时）；<br>父进程退出。<br>实现：go1.8采用Http.Server内置的Shutdown方法支持优雅关机。 然后fvbock&#x2F;endless可以实现优雅重启。</p><p>参考资料：gin框架实践连载八 | 如何优雅重启和停止 - 掘金，优雅地关闭或重启 go web 项目</p><p>持久化怎么做的？<br>所谓持久化就是将要保存的字符串写到硬盘等设备。</p><p>最简单的方式就是采用ioutil的WriteFile()方法将字符串写到磁盘上，这种方法面临格式化方面的问题。<br>更好的做法是将数据按照固定协议进行组织再进行读写，比如JSON，XML，Gob，csv等。<br>如果要考虑高并发和高可用，必须把数据放入到数据库中，比如MySQL，PostgreDB，MongoDB等。<br>参考链接：Golang 持久化</p><p>面试题5<br>作者：Dylan2333 链接：</p><p>测开转Go开发-面经&amp;总结_笔经面经_牛客网<br>​<a href="http://www.nowcoder.com/discuss/826193?type=post&order=recall&pos=&page=1&ncTraceId=&channel=-1&source_id=search_post_nctrack&gio_id=9C5DC1FFB3FC3BE29281D7CCFC420365-1645173894793">www.nowcoder.com/discuss/826193?type=post&amp;order=recall&amp;pos=&amp;page=1&amp;ncTraceId=&amp;channel=-1&amp;source_id=search_post_nctrack&amp;gio_id=9C5DC1FFB3FC3BE29281D7CCFC420365-1645173894793</a></p><p>该试题需要面试者有非常丰富的项目阅历和底层原理经验，熟练使用微服务，etcd，gin，gorm，gRPC等典型框架等模型或框架。</p><p>channel 死锁的场景<br>当一个channel中没有数据，而直接读取时，会发生死锁：<br>q :&#x3D; make(chan int,2)<br>&lt;-q<br>解决方案是采用select语句，再default放默认处理方式：</p><p>q :&#x3D; make(chan int,2)<br>select{<br>   case val:&#x3D;&lt;-q:<br>   default:<br>         …</p><p>}<br>当channel数据满了，再尝试写数据会造成死锁：<br>q :&#x3D; make(chan int,2)<br>q&lt;-1<br>q&lt;-2<br>q&lt;-3<br>解决方法，采用select</p><p>func main() {<br>    q :&#x3D; make(chan int, 2)<br>    q &lt;- 1<br>    q &lt;- 2<br>    select {<br>    case q &lt;- 3:<br>        fmt.Println(“ok”)<br>    default:<br>        fmt.Println(“wrong”)<br>    }</p><p>}<br>向一个关闭的channel写数据。<br>注意：一个已经关闭的channel，只能读数据，不能写数据。</p><p>参考资料：Golang关于channel死锁情况的汇总以及解决方案</p><p>对已经关闭的chan进行读写会怎么样？<br>读已经关闭的chan能一直读到东西，但是读到的内容根据通道内关闭前是否有元素而不同。<br>如果chan关闭前，buffer内有元素还未读,会正确读到chan内的值，且返回的第二个bool值（是否读成功）为true。<br>如果chan关闭前，buffer内有元素已经被读完，chan内无值，接下来所有接收的值都会非阻塞直接成功，返回 channel 元素的零值，但是第二个bool值一直为false。<br>写已经关闭的chan会panic。</p><p>说说 atomic底层怎么实现的.<br>atomic源码位于<code>sync\atomic</code>。通过阅读源码可知，atomic采用CAS（CompareAndSwap）的方式实现的。所谓CAS就是使用了CPU中的原子性操作。在操作共享变量的时候，CAS不需要对其进行加锁，而是通过类似于乐观锁的方式进行检测，总是假设被操作的值未曾改变（即与旧值相等），并一旦确认这个假设的真实性就立即进行值替换。本质上是不断占用CPU资源来避免加锁的开销。</p><p>参考资料：Go语言的原子操作atomic - 编程猎人</p><p>channel底层实现？是否线程安全。<br>channel底层实现在src&#x2F;runtime&#x2F;chan.go中</p><p>channel内部是一个循环链表。内部包含buf, sendx, recvx, lock ,recvq, sendq几个部分；</p><p>buf是有缓冲的channel所特有的结构，用来存储缓存数据。是个循环链表；</p><p>sendx和recvx用于记录buf这个循环链表中的发送或者接收的index；<br>lock是个互斥锁；<br>recvq和sendq分别是接收(&lt;-channel)或者发送(channel &lt;- xxx)的goroutine抽象出来的结构体(sudog)的队列。是个双向链表。<br>channel是线程安全的。</p><p>参考资料：Kitou：Golang 深度剖析 – channel的底层实现</p><p>map的底层实现。<br>源码位于src\runtime\map.go 中。</p><p>go的map和C++map不一样，底层实现是哈希表，包括两个部分：hmap和bucket。</p><p>里面最重要的是buckets（桶），buckets是一个指针，最终它指向的是一个结构体：</p><p>&#x2F;&#x2F; A bucket for a Go map.<br>type bmap struct {<br>    tophash [bucketCnt]uint8<br>}<br>每个bucket固定包含8个key和value(可以查看源码bucketCnt&#x3D;8).实现上面是一个固定的大小连续内存块，分成四部分：每个条目的状态，8个key值，8个value值，指向下个bucket的指针。</p><p>创建哈希表使用的是makemap函数.map 的一个关键点在于，哈希函数的选择。在程序启动时，会检测 cpu 是否支持 aes，如果支持，则使用 aes hash，否则使用 memhash。这是在函数 alginit() 中完成，位于路径：src&#x2F;runtime&#x2F;alg.go 下。</p><p>map查找就是将key哈希后得到64位（64位机）用最后B个比特位计算在哪个桶。在 bucket 中，从前往后找到第一个空位。这样，在查找某个 key 时，先找到对应的桶，再去遍历 bucket 中的 key。</p><p>关于map的查找和扩容可以参考map的用法到map底层实现分析。</p><p>select的实现原理？<br>select源码位于src\runtime\select.go，最重要的scase 数据结构为：</p><p>type scase struct {<br>    c    *hchan         &#x2F;&#x2F; chan<br>    elem unsafe.Pointer &#x2F;&#x2F; data element<br>}<br>scase.c为当前case语句所操作的channel指针，这也说明了一个case语句只能操作一个channel。</p><p>scase.elem表示缓冲区地址：</p><p>caseRecv ： scase.elem表示读出channel的数据存放地址；<br>caseSend ： scase.elem表示将要写入channel的数据存放地址；<br>select的主要实现位于：select.go函数：其主要功能如下：</p><ol><li><p>锁定scase语句中所有的channel</p></li><li><p>按照随机顺序检测scase中的channel是否ready</p></li></ol><p>2.1 如果case可读，则读取channel中数据，解锁所有的channel，然后返回(case index, true)</p><p>2.2 如果case可写，则将数据写入channel，解锁所有的channel，然后返回(case index, false)</p><p>2.3 所有case都未ready，则解锁所有的channel，然后返回（default index, false）</p><ol start="3"><li>所有case都未ready，且没有default语句</li></ol><p>3.1 将当前协程加入到所有channel的等待队列</p><p>3.2 当将协程转入阻塞，等待被唤醒</p><ol start="4"><li>唤醒后返回channel对应的case index</li></ol><p>4.1 如果是读操作，解锁所有的channel，然后返回(case index, true)</p><p>4.2 如果是写操作，解锁所有的channel，然后返回(case index, false)</p><p>参考资料：Go select的使用和实现原理.</p><p>go的interface怎么实现的？<br>go interface源码在runtime\iface.go中。</p><p>go的接口由两种类型实现iface和eface。iface是包含方法的接口，而eface不包含方法。</p><p>iface<br>对应的数据结构是（位于src\runtime\runtime2.go）：</p><p>type iface struct {<br>    tab  *itab<br>    data unsafe.Pointer<br>}<br>可以简单理解为，tab表示接口的具体结构类型，而data是接口的值。</p><p>itab：<br>type itab struct {<br>    inter *interfacetype &#x2F;&#x2F;此属性用于定位到具体interface<br>    _type *_type &#x2F;&#x2F;此属性用于定位到具体interface<br>    hash  uint32 &#x2F;&#x2F; copy of _type.hash. Used for type switches.<br>    _     [4]byte<br>    fun   [1]uintptr &#x2F;&#x2F; variable sized. fun[0]&#x3D;&#x3D;0 means _type does not implement inter.<br>}<br>属性interfacetype类似于_type，其作用就是interface的公共描述，类似的还有maptype、arraytype、chantype…其都是各个结构的公共描述，可以理解为一种外在的表现信息。interfaetype和type唯一确定了接口类型，而hash用于查询和类型判断。fun表示方法集。</p><p>eface<br>与iface基本一致，但是用_type直接表示类型，这样的话就无法使用方法。</p><p>type eface struct {<br>    _type *_type<br>    data  unsafe.Pointer<br>}<br>这里篇幅有限，深入讨论可以看：深入研究 Go interface 底层实现</p><p>go的reflect 底层实现<br>go reflect源码位于src\reflect\下面，作为一个库独立存在。反射是基于接口实现的。</p><p>Go反射有三大法则：</p><p>反射从接口映射到反射对象；</p><p>法则1<br>反射从反射对象映射到接口值；</p><p>法则2<br>只有值可以修改(settable)，才可以修改反射对象。<br>Go反射基于上述三点实现。我们先从最核心的两个源文件入手type.go和value.go.</p><p>type用于获取当前值的类型。value用于获取当前的值。</p><p>参考资料：The Laws of Reflection， 图解go反射实现原理</p><p>go GC的原理知道吗？<br>如果需要从源码角度解释GC，推荐阅读（非常详细，图文并茂）：</p><p><a href="https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-garbage-collector/">https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-garbage-collector/</a></p><p>go里用过哪些设计模式 ?<br>Go设计模式常见面试题【2022版】<br>8 赞同 · 4 评论文章</p><p>go的调试&#x2F;分析工具用过哪些。<br>go的自带工具链相当丰富，</p><p>go cover : 测试代码覆盖率；<br>godoc: 用于生成go文档；<br>pprof：用于性能调优，针对cpu，内存和并发；<br>race：用于竞争检测；</p><p>进程被kill，如何保证所有goroutine顺利退出<br>goroutine监听SIGKILL信号，一旦接收到SIGKILL，则立刻退出。可采用select方法。</p><p>var wg &#x3D; &amp;sync.WaitGroup{}</p><p>func main() {<br>    wg.Add(1)</p><pre><code>go func() &#123;    c1 := make(chan os.Signal, 1)    signal.Notify(c1, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)    fmt.Printf(&quot;goroutine 1 receive a signal : %v\n\n&quot;, &lt;-c1)    wg.Done()&#125;()wg.Wait()fmt.Printf(&quot;all groutine done!\n&quot;)</code></pre><p>}</p><p>说说context包的作用？你用过哪些，原理知道吗？<br>context可以用来在goroutine之间传递上下文信息，相同的context可以传递给运行在不同goroutine中的函数，上下文对于多个goroutine同时使用是安全的，context包定义了上下文类型，可以使用background、TODO创建一个上下文，在函数调用链之间传播context，也可以使用WithDeadline、WithTimeout、WithCancel 或 WithValue 创建的修改副本替换它，听起来有点绕，其实总结起就是一句话：context的作用就是在不同的goroutine之间同步请求特定的数据、取消信号以及处理请求的截止日期。</p><p>关于context原理，可以参看：小白也能看懂的context包详解：从入门到精通</p><p>grpc为啥好，基本原理是什么，和http比呢<br>官方介绍：gRPC 是一个现代开源的高性能远程过程调用 (RPC) 框架，可以在任何环境中运行。它可以通过对负载平衡、跟踪、健康检查和身份验证的可插拔支持有效地连接数据中心内和跨数据中心的服务。它也适用于分布式计算的最后一英里，将设备、移动应用程序和浏览器连接到后端服务。</p><p>区别：</p><ul><li>rpc是远程过程调用，就是本地去调用一个远程的函数，而http是通过 url和符合restful风格的数据包去发送和获取数据；</li><li>rpc的一般使用的编解码协议更加高效，比如grpc使用protobuf编解码。而http的一般使用json进行编解码，数据相比rpc更加直观，但是数据包也更大，效率低下；</li><li>rpc一般用在服务内部的相互调用，而http则用于和用户交互；<br>相似点：<br>都有类似的机制，例如grpc的metadata机制和http的头机制作用相似，而且web框架，和rpc框架中都有拦截器的概念。grpc使用的是http2.0协议。<br>官网：gRPC</li></ul><p>etcd怎么搭建的，具体怎么用的<br>熔断怎么做的<br>服务降级怎么搞<br>1亿条数据动态增长，取top10，怎么实现<br>进程挂了怎么办<br>nginx配置过吗，有哪些注意的点<br>设计一个阻塞队列<br>mq消费阻塞怎么办<br>性能没达到预期，有什么解决方案</p><p>编程系列<br>实现使用字符串函数名，调用函数。<br>思路：采用反射的Call方法实现。</p><p>package main<br>import (<br>    “fmt”<br>    “reflect”<br>)</p><p>type Animal struct{</p><p>}</p><p>func (a *Animal) Eat(){<br>    fmt.Println(“Eat”)<br>}</p><p>func main(){<br>    a :&#x3D; Animal{}<br>    reflect.ValueOf(&amp;a).MethodByName(“Eat”).Call([]reflect.Value{})</p><p>}</p><p>（Goroutine）有三个函数，分别打印”cat”, “fish”,”dog”要求每一个函数都用一个goroutine，按照顺序打印100次。<br>此题目考察channel，用三个无缓冲channel，如果一个channel收到信号则通知下一个。</p><p>package main</p><p>import (<br>    “fmt”<br>    “time”<br>)</p><p>var dog &#x3D; make(chan struct{})<br>var cat &#x3D; make(chan struct{})<br>var fish &#x3D; make(chan struct{})</p><p>func Dog() {<br>    &lt;-fish<br>    fmt.Println(“dog”)<br>    dog &lt;- struct{}{}<br>}</p><p>func Cat() {<br>    &lt;-dog<br>    fmt.Println(“cat”)<br>    cat &lt;- struct{}{}<br>}</p><p>func Fish() {<br>    &lt;-cat<br>    fmt.Println(“fish”)<br>    fish &lt;- struct{}{}<br>}</p><p>func main() {<br>    for i :&#x3D; 0; i &lt; 100; i++ {<br>        go Dog()<br>        go Cat()<br>        go Fish()<br>    }<br>    fish &lt;- struct{}{}</p><pre><code>time.Sleep(10 * time.Second)</code></pre><p>}</p><p>两个协程交替打印10个字母和数字<br>思路：采用channel来协调goroutine之间顺序。</p><p>主线程一般要waitGroup等待协程退出，这里简化了一下直接sleep。</p><p>package main</p><p>import (<br>    “fmt”<br>    “time”<br>)</p><p>var word &#x3D; make(chan struct{}, 1)<br>var num &#x3D; make(chan struct{}, 1)</p><p>func printNums() {<br>    for i :&#x3D; 0; i &lt; 10; i++ {<br>        &lt;-word<br>        fmt.Println(1)<br>        num &lt;- struct{}{}<br>    }<br>}<br>func printWords() {<br>    for i :&#x3D; 0; i &lt; 10; i++ {<br>        &lt;-num<br>        fmt.Println(“a”)<br>        word &lt;- struct{}{}<br>    }<br>}</p><p>func main() {<br>    num &lt;- struct{}{}<br>    go printNums()<br>    go printWords()<br>    time.Sleep(time.Second * 1)<br>}<br>代码： @中二的灰太狼</p><p>启动 2个groutine 2秒后取消， 第一个协程1秒执行完，第二个协程3秒执行完。<br>思路：采用ctx, _ :&#x3D; context.WithTimeout(context.Background(), time.Second*2)实现2s取消。协程执行完后通过channel通知，是否超时。</p><p>package main</p><p>import (<br>    “context”<br>    “fmt”<br>    “time”<br>)</p><p>func f1(in chan struct{}) {</p><pre><code>time.Sleep(1 * time.Second)in &lt;- struct&#123;&#125;&#123;&#125;</code></pre><p>}</p><p>func f2(in chan struct{}) {<br>    time.Sleep(3 * time.Second)<br>    in &lt;- struct{}{}<br>}</p><p>func main() {<br>    ch1 :&#x3D; make(chan struct{})<br>    ch2 :&#x3D; make(chan struct{})<br>    ctx, _ :&#x3D; context.WithTimeout(context.Background(), 2*time.Second)</p><pre><code>go func() &#123;    go f1(ch1)    select &#123;    case &lt;-ctx.Done():        fmt.Println(&quot;f1 timeout&quot;)        break    case &lt;-ch1:        fmt.Println(&quot;f1 done&quot;)    &#125;&#125;()go func() &#123;    go f2(ch2)    select &#123;    case &lt;-ctx.Done():        fmt.Println(&quot;f2 timeout&quot;)        break    case &lt;-ch2:        fmt.Println(&quot;f2 done&quot;)    &#125;&#125;()time.Sleep(time.Second * 5)</code></pre><p>}<br>代码： @中二的灰太狼</p><p>当select监控多个chan同时到达就绪态时，如何先执行某个任务？<br>可以在子case再加一个for select语句。</p><p>func priority_select(ch1, ch2 &lt;-chan string) {<br>    for {<br>        select {<br>        case val :&#x3D; &lt;-ch1:<br>            fmt.Println(val)<br>        case val2 :&#x3D; &lt;-ch2:<br>        priority:<br>            for {<br>                select {<br>                case val1 :&#x3D; &lt;-ch1:<br>                    fmt.Println(val1)</p><pre><code>            default:                break priority            &#125;        &#125;        fmt.Println(val2)    &#125;&#125;</code></pre><p>}</p><p>总结<br>Go面试复习应该有所侧重，关注切片，通道，异常处理，Goroutine，GMP模型，字符串高效拼接，指针，反射，接口，sync。对于比较难懂的部分，GMP模型和GC和内存管理，应该主动去看源码，然后慢慢理解。业务代码写多了，自然就有理解了。</p><p><a href="https://zhuanlan.zhihu.com/p/471490292">https://zhuanlan.zhihu.com/p/471490292</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试题1&quot;&gt;&lt;a href=&quot;#面试题1&quot; class=&quot;headerlink&quot; title=&quot;面试题1&quot;&gt;&lt;/a&gt;面试题1&lt;/h1&gt;&lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go常用设计模式</title>
    <link href="https://hiro-lin.github.io/2023/02/11/go%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://hiro-lin.github.io/2023/02/11/go%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-02-10T17:51:34.000Z</published>
    <updated>2023-02-10T18:04:01.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1 创建型模式"></a>1 创建型模式</h1><h2 id="1-1-工厂方法模式"><a href="#1-1-工厂方法模式" class="headerlink" title="1.1 工厂方法模式"></a>1.1 工厂方法模式</h2><p>❓问题描述：假设你正在开发一款物流管理应用。 最初版本只能处理卡车运输， 因此大部分代码都在位于名为 卡车的类中。</p><p>一段时间后， 这款应用变得极受欢迎。 你每天都能收到十几次来自海运公司的请求， 希望应用能够支持海上物流功能。</p><p>解决方案：我们抽象出一个物流工厂，然后分别实例化陆上，海上物流等工厂类，再生产对应产品。</p><p>首先写一个表示通用物流的接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type iLogistics interface &#123;</span><br><span class="line">setName(string)</span><br><span class="line">getName() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就是陆上物流的工厂类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type RoadLogistics struct &#123;</span><br><span class="line">name string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (r *RoadLogistics) setName(name string) &#123;</span><br><span class="line">r.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (r *RoadLogistics) getName() string &#123;</span><br><span class="line">return r.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var roadInstance iLogistics = (*RoadLogistics)(nil)  // 验证RoadLogistics是否实习了接口iLogistics</span><br></pre></td></tr></table></figure><p>以及海上物流的工厂类，因为类似这里就省略了。</p><p>之后就是具体产品了，比如陆上的有汽车，火车和高铁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type Vehicle struct &#123;</span><br><span class="line">RoadLogistics</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewVehicle() (v *Vehicle) &#123;</span><br><span class="line">v = new(Vehicle)</span><br><span class="line">v.RoadLogistics = RoadLogistics&#123;</span><br><span class="line">Name: &quot;vehicle&quot;,</span><br><span class="line">&#125;</span><br><span class="line">return v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是汽车的例子，我们再写一个火车的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type Train struct &#123;</span><br><span class="line">RoadLogistics</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewTrain() (t *Train) &#123;</span><br><span class="line">t = new(Train)</span><br><span class="line">t.RoadLogistics = RoadLogistics&#123;</span><br><span class="line">Name: &quot;train&quot;,</span><br><span class="line">&#125;</span><br><span class="line">return t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以根据类别，直接初始化对应的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func getLogistics(means string) (i iLogistics, err error)&#123;</span><br><span class="line">if  means == &quot;vehicle&quot; &#123;</span><br><span class="line">return NewVehicle(), nil</span><br><span class="line">&#125;else if means == &quot;train&quot;&#123;</span><br><span class="line">return NewTrain(), nil</span><br><span class="line">&#125;</span><br><span class="line">return nil, errors.New(&quot;unknown means of transportation&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端使用，直接调用getLogistics就好。</p><h2 id="1-2-抽象工厂模式"><a href="#1-2-抽象工厂模式" class="headerlink" title="1.2 抽象工厂模式"></a>1.2 抽象工厂模式</h2><p>抽象工厂模式是一种创建型设计模式，它能创建一系列相关的对象，而无需指定其具体类。</p><p>❓问题描述：假设一下，如果你想要购买一组运动装备，比如一双鞋与一件衬衫这样由两种不同产品组合而成的套装。相信你会想去购买同一品牌的商品，这样商品之间能够互相搭配起来。</p><p>解决方案：首先，抽象工厂模式为系列中的每件产品明确声明接口（例如T恤或者鞋子）。然后，确保所有产品变体都继承这些接口。</p><p>下面是一个抽象工厂接口，它能产生工厂类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type iSportsFactory interface &#123;</span><br><span class="line">    makeShoe() iShoe</span><br><span class="line">    makeShirt() iShirt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getSportsFactory(brand string) (iSportsFactory, error) &#123;</span><br><span class="line">    if brand == &quot;adidas&quot; &#123;</span><br><span class="line">        return &amp;adidas&#123;&#125;, nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if brand == &quot;nike&quot; &#123;</span><br><span class="line">        return &amp;nike&#123;&#125;, nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return nil, fmt.Errorf(&quot;Wrong brand type passed&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在有一个adidas的工厂：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type adidas struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (a *adidas) makeShoe() iShoe &#123;</span><br><span class="line">    return &amp;adidasShoe&#123;</span><br><span class="line">        shoe: shoe&#123;</span><br><span class="line">            logo: &quot;adidas&quot;,</span><br><span class="line">            size: 14,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (a *adidas) makeShirt() iShirt &#123;</span><br><span class="line">    return &amp;adidasShirt&#123;</span><br><span class="line">        shirt: shirt&#123;</span><br><span class="line">            logo: &quot;adidas&quot;,</span><br><span class="line">            size: 14,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和nike的工厂（略）。</p><p>然后是抽象的产品，它有尺寸和logo两个属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">type iShoe interface &#123;</span><br><span class="line">    setLogo(logo string)</span><br><span class="line">    setSize(size int)</span><br><span class="line">    getLogo() string</span><br><span class="line">    getSize() int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type shoe struct &#123;</span><br><span class="line">    logo string</span><br><span class="line">    size int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *shoe) setLogo(logo string) &#123;</span><br><span class="line">    s.logo = logo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *shoe) getLogo() string &#123;</span><br><span class="line">    return s.logo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *shoe) setSize(size int) &#123;</span><br><span class="line">    s.size = size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *shoe) getSize() int &#123;</span><br><span class="line">    return s.size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>adidas工厂必须能生产鞋子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type adidasShoe struct &#123;</span><br><span class="line">    shoe</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    adidasFactory, _ := getSportsFactory(&quot;adidas&quot;)</span><br><span class="line">    nikeFactory, _ := getSportsFactory(&quot;nike&quot;)</span><br><span class="line"></span><br><span class="line">    nikeShoe := nikeFactory.makeShoe()</span><br><span class="line">    nikeShirt := nikeFactory.makeShirt()</span><br><span class="line"></span><br><span class="line">    adidasShoe := adidasFactory.makeShoe()</span><br><span class="line">    adidasShirt := adidasFactory.makeShirt()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂方法模式和抽象工厂模式的区别在于：前者实例化具体的产品，后者实例化具体的工厂，每个工厂再实例化同样的产品系列。</p><h2 id="1-3-单例模式"><a href="#1-3-单例模式" class="headerlink" title="1.3 单例模式"></a>1.3 单例模式</h2><p>单例模式是一种创建型设计模式，一个类仅有一个实例，并提供访问该实例的全局节点。</p><p>❓问题描述：假设一下，如果你想要为你的工程建立一个日志Logger模块，但你只需要全局唯一的日志系统，不希望日志被记录到乱七八糟的位置。</p><p>解决方案：我们需要考虑两个问题：1.如何确保全局唯一，2.如何保证并发控制。</p><p>go里面有sync.Once 方法，能非常优雅的解决这些问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type Logger struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var logger *Logger</span><br><span class="line"></span><br><span class="line">var once sync.Once</span><br><span class="line"></span><br><span class="line">func getLoggerInstance() *Logger &#123;</span><br><span class="line">if logger == nil &#123;</span><br><span class="line">once.Do(</span><br><span class="line">func() &#123;</span><br><span class="line">logger = &amp;Logger&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">return logger</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sync.Once内部原理是使用了一个互斥锁，每次检查该变量有无被分配（是否为nil），只有为nil才初始化实例。</p><h2 id="1-4-生成器模式"><a href="#1-4-生成器模式" class="headerlink" title="1.4 生成器模式"></a>1.4 生成器模式</h2><p>生成器模式允许你分步创建复杂的对象。</p><p>假设你的构造函数有很多参数，那么调用该函数将非常不方便。在C#和python这样支持重载的语言还好，对于go来说就是灾难。</p><p>❓问题描述：假设一下，我们需要在游戏里设计不同的虚拟房屋，每个房子有不同的门和窗户等属性。现在有两种类型的房屋normal和igloo（木制）。</p><p>解决方案：我们需要考虑两个问题：1.如何确保全局唯一，2.如何保证并发控制。</p><p>定义生成器接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">type iBuilder interface &#123;</span><br><span class="line">    setWindowType()</span><br><span class="line">    setDoorType()</span><br><span class="line">    setNumFloor()</span><br><span class="line">    getHouse() house</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getBuilder(builderType string) iBuilder &#123;</span><br><span class="line">    if builderType == &quot;normal&quot; &#123;</span><br><span class="line">        return &amp;normalBuilder&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if builderType == &quot;igloo&quot; &#123;</span><br><span class="line">        return &amp;iglooBuilder&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的房屋生成器（以normal为例子）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">type normalBuilder struct &#123;</span><br><span class="line">    windowType string</span><br><span class="line">    doorType   string</span><br><span class="line">    floor      int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func newNormalBuilder() *normalBuilder &#123;</span><br><span class="line">    return &amp;normalBuilder&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (b *normalBuilder) setWindowType() &#123;</span><br><span class="line">    b.windowType = &quot;Wooden Window&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (b *normalBuilder) setDoorType() &#123;</span><br><span class="line">    b.doorType = &quot;Wooden Door&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (b *normalBuilder) setNumFloor() &#123;</span><br><span class="line">    b.floor = 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (b *normalBuilder) getHouse() house &#123;</span><br><span class="line">    return house&#123;</span><br><span class="line">        doorType:   b.doorType,</span><br><span class="line">        windowType: b.windowType,</span><br><span class="line">        floor:      b.floor,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>房屋（产品）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type house struct &#123;</span><br><span class="line">    windowType string</span><br><span class="line">    doorType   string</span><br><span class="line">    floor      int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个主管，他手下有可以修建所有类型房屋的工人。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type director struct &#123;</span><br><span class="line">    builder iBuilder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func newDirector(b iBuilder) *director &#123;</span><br><span class="line">    return &amp;director&#123;</span><br><span class="line">        builder: b,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d *director) setBuilder(b iBuilder) &#123;</span><br><span class="line">    d.builder = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d *director) buildHouse() house &#123;</span><br><span class="line">    d.builder.setDoorType()</span><br><span class="line">    d.builder.setWindowType()</span><br><span class="line">    d.builder.setNumFloor()</span><br><span class="line">    return d.builder.getHouse()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    normalBuilder := getBuilder(&quot;normal&quot;)</span><br><span class="line">    iglooBuilder := getBuilder(&quot;igloo&quot;)</span><br><span class="line"></span><br><span class="line">    director := newDirector(normalBuilder)</span><br><span class="line">    normalHouse := director.buildHouse()</span><br><span class="line"></span><br><span class="line">    fmt.Printf(&quot;Normal House Door Type: %s\n&quot;, normalHouse.doorType)</span><br><span class="line">    fmt.Printf(&quot;Normal House Window Type: %s\n&quot;, normalHouse.windowType)</span><br><span class="line">    fmt.Printf(&quot;Normal House Num Floor: %d\n&quot;, normalHouse.floor)</span><br><span class="line"></span><br><span class="line">    director.setBuilder(iglooBuilder)</span><br><span class="line">    iglooHouse := director.buildHouse()</span><br><span class="line"></span><br><span class="line">    fmt.Printf(&quot;\nIgloo House Door Type: %s\n&quot;, iglooHouse.doorType)</span><br><span class="line">    fmt.Printf(&quot;Igloo House Window Type: %s\n&quot;, iglooHouse.windowType)</span><br><span class="line">    fmt.Printf(&quot;Igloo House Num Floor: %d\n&quot;, iglooHouse.floor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-原型模式"><a href="#1-5-原型模式" class="headerlink" title="1.5 原型模式"></a>1.5 原型模式</h2><p>原型模式使你能够复制已有对象，无需使代码依赖它们所属的类。</p><p>❓问题描述：假设一下，你有一个原型，你想复制出一个一模一样的复制品，但不巧的是，类的某些成员（比如登录模块）是私有的。</p><p>解决方案：在原型类实现公共方法clone()能够返回对象的复制。</p><p>让我们尝试通过基于操作系统文件系统的示例来理解原型模式。 操作系统的文件系统是递归的： 文件夹中包含文件和文件夹， 其中又包含文件和文件夹， 以此类推。</p><p>每个文件和文件夹都可用一个 inode接口来表示。 ​ inode接口中同样也有 clone克隆功能。</p><p>file文件和 fold­er文件夹结构体都实现了 print打印和 clone方法， 因为它们都是 inode类型。 同时， 注意 file和 fold­er中的 clone方法。 这两者的 clone方法都会返回相应文件或文件夹的副本。 同时在克隆过程中， 我们会在其名称后面添加 “_clone” 字样。</p><p>原型接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type inode interface &#123;</span><br><span class="line">    print(string)</span><br><span class="line">    clone() inode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件原型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type file struct &#123;</span><br><span class="line">    name string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (f *file) print(indentation string) &#123;</span><br><span class="line">    fmt.Println(indentation + f.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (f *file) clone() inode &#123;</span><br><span class="line">    return &amp;file&#123;name: f.name + &quot;_clone&quot;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件夹原型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">type folder struct &#123;</span><br><span class="line">    children []inode</span><br><span class="line">    name      string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (f *folder) print(indentation string) &#123;</span><br><span class="line">    fmt.Println(indentation + f.name)</span><br><span class="line">    for _, i := range f.children &#123;</span><br><span class="line">        i.print(indentation + indentation)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (f *folder) clone() inode &#123;</span><br><span class="line">    cloneFolder := &amp;folder&#123;name: f.name + &quot;_clone&quot;&#125;</span><br><span class="line">    var tempChildren []inode</span><br><span class="line">    for _, i := range f.children &#123;</span><br><span class="line">        copy := i.clone()</span><br><span class="line">        tempChildren = append(tempChildren, copy)</span><br><span class="line">    &#125;</span><br><span class="line">    cloneFolder.children = tempChildren</span><br><span class="line">    return cloneFolder</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    file1 := &amp;file&#123;name: &quot;File1&quot;&#125;</span><br><span class="line">    file2 := &amp;file&#123;name: &quot;File2&quot;&#125;</span><br><span class="line">    file3 := &amp;file&#123;name: &quot;File3&quot;&#125;</span><br><span class="line"></span><br><span class="line">    folder1 := &amp;folder&#123;</span><br><span class="line">        children: []inode&#123;file1&#125;,</span><br><span class="line">        name:      &quot;Folder1&quot;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    folder2 := &amp;folder&#123;</span><br><span class="line">        children: []inode&#123;folder1, file2, file3&#125;,</span><br><span class="line">        name:      &quot;Folder2&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(&quot;\nPrinting hierarchy for Folder2&quot;)</span><br><span class="line">    folder2.print(&quot;  &quot;)</span><br><span class="line"></span><br><span class="line">    cloneFolder := folder2.clone()</span><br><span class="line">    fmt.Println(&quot;\nPrinting hierarchy for clone Folder&quot;)</span><br><span class="line">    cloneFolder.print(&quot;  &quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-创建型小结"><a href="#1-6-创建型小结" class="headerlink" title="1.6 创建型小结"></a>1.6 创建型小结</h2><ul><li>在许多设计工作的初期都会使用工厂方法模式 （较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用抽象工厂模式、 原型模式或生成器模式 （更灵活但更加复杂）。</li><li>生成器重点关注如何分步生成复杂对象。 抽象工厂专门用于生产一系列相关对象。 抽象工厂会马上返回产品， 生成器则允许你在获取产品前执行一些额外构造步骤。</li><li>你可以在创建复杂组合模式树时使用生成器， 因为这可使其构造步骤以递归的方式运行。</li><li>你可以结合使用生成器和桥接模式： 主管类负责抽象工作， 各种不同的生成器负责实现工作。</li><li>抽象工厂、 生成器和原型都可以用单例模式来实现。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-创建型模式&quot;&gt;&lt;a href=&quot;#1-创建型模式&quot; class=&quot;headerlink&quot; title=&quot;1 创建型模式&quot;&gt;&lt;/a&gt;1 创建型模式&lt;/h1&gt;&lt;h2 id=&quot;1-1-工厂方法模式&quot;&gt;&lt;a href=&quot;#1-1-工厂方法模式&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MongoDB面试题</title>
    <link href="https://hiro-lin.github.io/2023/02/11/MongoDB%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://hiro-lin.github.io/2023/02/11/MongoDB%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2023-02-10T17:27:17.000Z</published>
    <updated>2023-02-10T17:38:41.602Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.什么是MongoDB</strong></p><p>MongoDB是一个文档数据库，提供好的性能，领先的非关系型数据库。采用BSON存储文档数据。<br>BSON（）是一种类json的一种二进制形式的存储格式，简称Binary JSON.<br>相对于json多了date类型和二进制数组。</p><p><strong>2.MongoDB的优势有哪些</strong></p><p>面向文档的存储：以 JSON 格式的文档保存数据。<br>任何属性都可以建立索引。<br>复制以及高可扩展性。<br>自动分片。<br>丰富的查询功能。<br>快速的即时更新。</p><p><strong>3.什么是数据库</strong></p><p>　　数据库可以看成是一个电子化的文件柜,用户可以对文件中的数据运行新增、检索、更新、删除等操作。数据库是一个<br>所有集合的容器，在文件系统中每一个数据库都有一个相关的物理文件。</p><p><strong>4.什么是集合(表)</strong></p><p>集合就是一组 MongoDB 文档。它相当于关系型数据库（RDBMS）中的表这种概念。集合位于单独的一个数据库中。<br>一个集合内的多个文档可以有多个不同的字段。一般来说，集合中的文档都有着相同或相关的目的。</p><p><strong>5.什么是文档(记录)</strong></p><p>　　文档由一组key value组成。文档是动态模式,这意味着同一集合里的文档不需要有相同的字段和结构。在关系型<br>数据库中table中的每一条记录相当于MongoDB中的一个文</p><p><strong>6.MongoDB和关系型数据库术语对比图</strong></p><p><img src="/./../images/SSL%20%E5%92%8C%20TCPIP%20%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="MongoDB和关系型数据库术语对比图" title="MongoDB和关系型数据库术语对比图"></p><p><strong>7.什么是非关系型数据库</strong></p><p>　　非关系型数据库的显著特点是不使用SQL作为查询语言，数据存储不需要特定的表格模式。</p><p><strong>8 为什么用MOngoDB？</strong></p><p>架构简单<br>没有复杂的连接<br>深度查询能力,MongoDB支持动态查询。<br>容易调试<br>容易扩展<br>不需要转化&#x2F;映射应用对象到数据库对象<br>使用内部内存作为存储工作区,以便更快的存取数据。</p><p><strong>9 在哪些场景使用MongoDB</strong></p><p>大数据<br>内容管理系统<br>移动端Apps<br>数据管理</p><p><strong>10 MongoDB中的命名空间是什么意思?</strong></p><p>mongodb存储bson对象在丛集(collection)中.数据库名字和丛集名字以句点连结起来叫做名字空间(namespace). 　　一个集合命名空间又有多个数据域(extent)，集合命名空间里存储着集合的元数据，比如集合名称，集合的<br>第一个数据域和最后一个数据域的位置等等。而一个数据域由若干条文档(document)组成，每个数据域都有一个<br>头部，记录着第一条文档和最后一条文档的为知，以及该数据域的一些元数据。extent之间，document之间通过<br>双向链表连接。 索引的存储数据结构是B树，索引命名空间存储着对B树的根节点的指针。</p><p><strong>11 monogodb 中的分片什么意思</strong></p><p>　　分片是将数据水平切分到不同的物理节点。当应用数据越来越大的时候，数据量也会越来越大。当数据量增长<br>时，单台机器有可能无法存储数据或可接受的读取写入吞吐量。利用分片技术可以添加更多的机器来应对数据量增加<br>以及读写操作的要求。</p><p><strong>12 为什么要在MongoDB中使用分析器</strong></p><p>　　mongodb中包括了一个可以显示数据库中每个操作性能特点的数据库分析器.通过这个分析器你可以找到比预期慢<br>的查询(或写操作);利用这一信息,比如,可以确定是否需要添加索引.</p><p><strong>13 .MongoDB支持主键外键关系吗</strong></p><p>　　默认MongoDB不支持主键和外键关系。 用Mongodb本身的API需要硬编码才能实现外键关联，不够直观且难度<br>较大</p><p><strong>14 MongoDB支持哪些数据类型</strong></p><p>String<br>Integer<br>Double<br>Boolean<br>Object<br>Object ID<br>Arrays<br>Min&#x2F;Max Keys<br>Datetime<br>Code<br>Regular Expression等</p><p><strong>15 为什么要在MongoDB中用”Code”数据类型</strong></p><p>“Code”类型用于在文档中存储 JavaScript 代码。</p><p><strong>16 为什么要在MongoDB中用”Regular Expression”数据类型</strong></p><p>“Regular Expression”类型用于在文档中存储正则表达式</p><p><strong>17 为什么在MongoDB中使用”Object ID”数据类型</strong></p><p>“ObjectID”数据类型用于存储文档id</p><p><strong>18”ObjectID”有哪些部分组成</strong></p><p>一共有四部分组成:时间戳、客户端ID、客户进程ID、三个字节的增量计数器</p><p><strong>19 在MongoDb中什么是索引</strong></p><p>索引用于高效的执行查询,没有索引的MongoDB将扫描整个集合中的所有文档,这种扫描效率很低,需要处理大量<br>的数据. 索引是一种特殊的数据结构,将一小块数据集合保存为容易遍历的形式.索引能够存储某种特殊字段或字段集的<br>值,并按照索引指定的方式将字段值进行排序.</p><p><strong>20 如何添加索引</strong></p><p>使用db.collection.createIndex()在集合中创建一个索引</p><p><strong>21.如何查询集合中的文档</strong></p><p>db.collectionName.find({key:value})</p><p><strong>22用什么方法可以格式化输出结果</strong></p><p>db.collectionName.find().pretty()</p><p><strong>23 如何使用”AND”或”OR”条件循环查询集合中的文档</strong></p><p>db.mycol.find( { $or: [ {key1: value1}, {key2:value2} ] } ).pretty()</p><p><strong>24 更新数据</strong></p><p>db.collectionName.update({key:value},{$set:{newkey:newValue}})</p><p><strong>25 如何删除文档</strong></p><p>db.collectionName.remove({key:value})</p><p><strong>26 在MongoDB中如何排序</strong></p><p>并使用 1 和 -1 来指定排序方式，其中 1 表示升序，而 -1 表示降序。</p><p>db.connectionName.find({key:value}).sort({columnName:1})</p><p><strong>27 什么是聚合</strong></p><p>　　聚合操作能够处理数据记录并返回计算结果。聚合操作能将多个文档中的值组合起来，对成组数据执行各种操作，返回单一的结果。它相当于 SQL 中的 count(*) 组合 group by。对于 MongoDB 中的聚合操作，应该使用aggregate()方法。</p><p>db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</p><p><strong>28 在MongoDB中什么是副本集（避免单点故障）</strong></p><p>在MongoDB中副本集由一组MongoDB实例组成，包括一个主节点多个次节点，MongoDB客户端的所有数据都<br>写入主节点(Primary),副节点从主节点同步写入数据，以保持所有复制集内存储相同的数据，提高数据可用性。</p><p><strong>29 什么是NoSQL数据库？NoSQL和RDBMS有什么区别？在哪些情况下使用和不使用NoSQL数据库？</strong></p><p>　NoSQL是非关系型数据库，NoSQL &#x3D; Not Only SQL。<br>关系型数据库采用的结构化的数据，NoSQL采用的是键值对的方式存储数据。 在处理非结构化&#x2F;半结构化的大数据时；在水平方向上进行扩展时；随时应对动态增加的数据项时可以优先考虑<br>使用NoSQL数据库。 在考虑数据库的成熟度；支持；分析和商业智能；管理及专业性等问题时，应优先考虑关系型数据库。</p><p><strong>30 MongoDB支持存储过程吗？如果支持的话，怎么用？</strong></p><p>MongoDB支持存储过程，它是javascript写的，保存在db.system.js表中。</p><p><strong>31如何理解MongoDB中的GridFS机制，MongoDB为何使用GridFS来存储文件？</strong></p><p>　　GridFS是一种将大型文件存储在MongoDB中的文件规范。使用GridFS可以将大文件分隔成多个小文档存放，这样我们能够有效的保存大文档，而且解决了BSON对象有限制的问题。</p><p><strong>32 为什么MongoDB的数据文件很大？</strong></p><p>　　MongoDB采用的预分配空间的方式来防止文件碎片。</p><p><strong>33 当更新一个正在被迁移的块（Chunk）上的文档时会发生什么？</strong></p><p>　　更新操作会立即发生在旧的块（Chunk）上，然后更改才会在所有权转移前复制到新的分片上。</p><p><strong>34 MongoDB在A:{B,C}上建立索引，查询A:{B,C}和A:{C,B}都会使用索引吗？</strong></p><p>　　不会，只会在A:{B,C}上使用索引。</p><p><strong>35 mongodb成为最好nosql数据库的原因是什么?</strong></p><p>　　面向文件的 高性能 高可用性 易扩展性 丰富的查询语言</p><p><strong>36 如果用户移除对象的属性,该属性是否从存储层中删除?</strong></p><p>　　是的,用户移除属性然后对象会重新保存(re-save()).</p><p><strong>37 允许空值null吗?</strong></p><p>　　对于对象成员而言,是的.然而用户不能够添加空值(null)到数据库丛集(collection)因为空值不是对象.然而用户能够添加空对象{}.</p><p><strong>38 更新操作立刻fsync到磁盘?</strong></p><p>　　不会,磁盘写操作默认是延迟执行的.写操作可能在两三秒(默认在60秒内)后到达磁盘.例如,如果一秒内数据库收到一千个对一个对象递增的操作,仅刷新磁盘一次.</p><p><strong>39 如何执行事务&#x2F;加锁?</strong></p><p>　　mongodb没有使用传统的锁或者复杂的带回滚的事务,因为它设计的宗旨是轻量,快速以及可预计的高性能.可以把它类比成mysql mylsam的自动提交模式.通过精简对事务的支持,性能得到了提升,特别是在一个可能会穿过多个服务器的系统里.</p><p><strong>40 启用备份故障恢复需要多久?</strong></p><p>　　从备份数据库声明主数据库宕机到选出一个备份数据库作为新的主数据库将花费10到30秒时间.这期间在主数据库上的操作将会失败–包括写入和强一致性读取(strong consistent read)操作.然而,你还能在第二数据库上执行最终一致性查询(eventually consistent query)(在slaveok模式下),即使在这段时间里.</p><p><strong>41 什么是master或primary?</strong></p><p>　　它是当前备份集群(replica set)中负责处理所有写入操作的主要节点&#x2F;成员.在一个备份集群中,当失效备援(failover)事件发生时,一个另外的成员会变成primary.</p><p><strong>42 我应该启动一个集群分片(sharded)还是一个非集群分片的 mongodb 环境?</strong></p><p>　　(数据量大用集群分片,数据量小用非集群)</p><p>　　为开发便捷起见,我们建议以非集群分片(unsharded)方式开始一个 mongodb 环境,除非一台服务器不足以存放你的初始数据集.从非集群分片升级到集群分片(sharding)是无缝的,所以在你的数据集还不是很大的时候没必要考虑集群分片(sharding).</p><p><strong>43 分片(sharding)和复制(replication)是怎样工作的?</strong></p><p>　　每一个分片(shard)是一个分区数据的逻辑集合.分片可能由单一服务器或者集群组成,我们推荐为每一个分片(shard)使用集群.</p><p><strong>44数据在什么时候才会扩展到多个分片(shard)里?</strong></p><p>　　mongodb 分片是基于区域(range)的.所以一个集合(collection)中的所有的对象都被存放到一个块(chunk)中.只有当存在多余一个块的时候,才会有多个分片获取数据的选项.现在,每个默认块的大小是 64mb,所以你需要至少 64 mb 空间才可以实施一个迁移.</p><p><strong>45 当我试图更新一个正在被迁移的块(chunk)上的文档时会发生什么?</strong></p><p>　　更新操作会立即发生在旧的分片(shard)上,然后更改才会在所有权转移(ownership transfers)前复制到新的分片上.</p><p><strong>46 如果在一个分片(shard)停止或者很慢的时候,我发起一个查询会怎样?</strong></p><p>　　如果一个分片(shard)停止了,除非查询设置了“partial”选项,否则查询会返回一个错误.如果一个分片(shard)响应很慢,mongodb则会等待它的响应.</p><p><strong>47 可以把movechunk目录里的旧文件删除吗?</strong></p><p>　　没问题,这些文件是在分片(shard)进行均衡操作(balancing)的时候产生的临时文件.一旦这些操作已经完成,相关的临时文件也应该被删除掉.但目前清理工作是需要手动的,所以请小心地考虑再释放这些文件的空间.</p><p><strong>48 如果块移动操作(movechunk)失败了,我需要手动清除部分转移的文档吗?</strong></p><p>　　不需要,移动操作是一致(consistent)并且是确定性的(deterministic);一次失败后,移动操作会不断重试;当完成后,数据只会出现在新的分片里(shard).</p><p><strong>49 mongodb是否支持事务</strong></p><p>　　MongoDB 4.0的新特性——事务（Transactions）：MongoDB 是不支持事务的，因此开发者在需要用到事务的时候，不得不借用其他工具，在业务代码层面去弥补数据库的不足。</p><p>　　事务和会话(Sessions)关联，一个会话同一时刻只能开启一个事务操作，当一个会话断开，这个会话中的事务也会结束。</p><p>————————————————<br>版权声明：本文为CSDN博主「KangJinXuan」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/KangJinXuan/article/details/126936926">https://blog.csdn.net/KangJinXuan/article/details/126936926</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;1.什么是MongoDB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MongoDB是一个文档数据库，提供好的性能，领先的非关系型数据库。采用BSON存储文档数据。&lt;br&gt;BSON（）是一种类json的一种二进制形式的存储格式，简称Binary JSON.&lt;br&gt;相对于</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TCP/IP协议常见面试题</title>
    <link href="https://hiro-lin.github.io/2023/02/10/TCP-IP%E5%8D%8F%E8%AE%AE%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://hiro-lin.github.io/2023/02/10/TCP-IP%E5%8D%8F%E8%AE%AE%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2023-02-10T13:00:31.000Z</published>
    <updated>2023-02-10T13:07:12.194Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、简述TCP的三次握手和四次挥手</strong><br>SYN:请求建立连接，FIN：请求断开连接，ACK:确认是否有效， seq:序列号， ack:确认号</p><p>1）三次握手</p><p>1.客户端向服务端发送⼀个SYN&#x3D;1（请求建立连接），并生成一个序列号seq&#x3D;j。</p><p>2.服务端接收到SYN&#x3D;1后，给客户端发送⼀个SYN&#x3D;1与ACK&#x3D;1；并将ack置为j+1;同时生成一个序列号seq&#x3D;k。</p><p>3.客户端接收到会检查ack是否为j+1与ACK是否为1，如果是，则会给服务端发送一个ACK&#x3D;1与ack&#x3D;k+1，以及自己的序列号seq&#x3D;j&#x3D;1; 服务端接收到会检查ACK是否为1与ack是否为k+1,如果是则代表连接建立成功，两者间可以传递数据。</p><p>2）四次挥手</p><p>1.客户端向服务端发送FIN&#x3D;1（请求关闭连接），并生成一个序列号seq&#x3D;x。</p><p>2.服务端接收FIN后，向客户端发送ACK&#x3D;1，ack&#x3D;x+1，并生成序列号seq&#x3D;y（客户端无数据发送，但服务器端需发送完最后的数据）。</p><p>3.服务端处理完所有数据后，向客户端发送FIN&#x3D;1与ACK&#x3D;1，ack&#x3D;x+1，并生成序列号z，表示服务端现在可以断开连接。</p><p>4.客户端收到服务端的数据包后，会向服务端发送ACK&#x3D;1,seq&#x3D;x&#x3D;1，ack&#x3D;z+1（需要等待2MSL后才可断开连接）。</p><p><strong>2、为什么是三次握手而不是两次握手？</strong></p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;因为如果客户端第一次发送的SYN报文因为网络问题而迟迟没有到达服务端，此时客户端会因为超时而重新发送一个新的SYN报文，此时上一个SYN报文在客户端就会失效，如果这里只采用两次握手，会因为客户端第二次发送SYN后，第一次发送的SYN又成功到达服务端，这时就会建立两个连接，产生问题。</p><p>3、为什么连接的时候是三次握手，关闭的时候却是四次握手？</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><p>4、为什么需要经过2MSL(报文段在网络中最大生存时间)才能返回到CLOSE状态？</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;是为了给最后一次发送的ACK报文成功到达服务端预留时间，因为如果因为网络阻塞最后一次ACK未能及时到达服务端，服务端会以为客户端为收到上一次发送的FIN报文，则服务端会重新发送FIN报文，而这是客户端已经断开连接了，这时就是产生错乱的问题。</p><p><strong>5、TCP与UDP的区别</strong></p><p>UDP适合广播发送，效率高但是不可靠。</p><p>TCP适合两个对象间传递数据，可靠性高但是效率低。<br>————————————————<br>版权声明：本文为CSDN博主「思泽Elly」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41696018/article/details/124249818">https://blog.csdn.net/qq_41696018/article/details/124249818</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;1、简述TCP的三次握手和四次挥手&lt;/strong&gt;&lt;br&gt;SYN:请求建立连接，FIN：请求断开连接，ACK:确认是否有效， seq:序列号， ack:确认号&lt;/p&gt;
&lt;p&gt;1）三次握手&lt;/p&gt;
&lt;p&gt;1.客户端向服务端发送⼀个SYN&amp;#x3D;1（请求建</summary>
      
    
    
    
    
    <category term="面试题" scheme="https://hiro-lin.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="TCP" scheme="https://hiro-lin.github.io/tags/TCP/"/>
    
    <category term="IP" scheme="https://hiro-lin.github.io/tags/IP/"/>
    
    <category term="UDP" scheme="https://hiro-lin.github.io/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>http与https的区别</title>
    <link href="https://hiro-lin.github.io/2023/02/10/http%E4%B8%8Ehttps%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://hiro-lin.github.io/2023/02/10/http%E4%B8%8Ehttps%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2023-02-10T11:43:20.000Z</published>
    <updated>2023-02-10T13:07:03.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、HTTP-与-HTTPS-的基本概念"><a href="#一、HTTP-与-HTTPS-的基本概念" class="headerlink" title="一、HTTP 与 HTTPS 的基本概念"></a>一、HTTP 与 HTTPS 的基本概念</h1><p><strong>HTTP：</strong> 超文本传输协议（HTTP，HyperText Transfer Protocol）是互联网上应用最为广泛的一种网络协议。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。它可以使浏览器更加高效。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。</p><p><strong>HTTP 原理:</strong></p><ul><li>客户端的浏览器首先要通过网络与服务器建立连接，该连接是通过 TCP 来完成的，一般 TCP 连接的端口号是80。 建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URI）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和许可内容。</li><li>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。</li></ul><p><b>HTTPS:</b>是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP&#x2F;IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p><p><img src="/./../images/SSL%20%E5%92%8C%20TCPIP%20%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="SSL 和 TCP/IP 示意图" title="SSL 和 TCP/IP 示意图"></p><p><strong>HTTPS 设计目标：</strong></p><p>(1) 数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。</p><p>(2) 数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。</p><p>(3) 身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。</p><h1 id="二、HTTP-与-HTTPS-的区别"><a href="#二、HTTP-与-HTTPS-的区别" class="headerlink" title="二、HTTP 与 HTTPS 的区别"></a>二、HTTP 与 HTTPS 的区别</h1><p>1、HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)</p><p>2、HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。</p><p>3、HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>4、HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。(无状态的意思是其数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久的维持对方的任何信息。)</p><h1 id="三、HTTPS-相对于-HTTP-的改进"><a href="#三、HTTPS-相对于-HTTP-的改进" class="headerlink" title="三、HTTPS 相对于 HTTP 的改进"></a>三、HTTPS 相对于 HTTP 的改进</h1><p><strong>双向的身份认证</strong></p><p>客户端和服务端在传输数据之前，会通过基于X.509证书对双方进行身份认证 。具体过程如下：</p><p>客户端发起 SSL 握手消息给服务端要求连接。</p><p>服务端将证书发送给客户端。</p><p>客户端检查服务端证书，确认是否由自己信任的证书签发机构签发(客户端内置了所有受信任 CA 的证书)。 如果不是，将是否继续通讯的决定权交给用户选择 ( 注意，这里将是一个安全缺陷 )。如果检查无误或者用户选择继续，则客户端认可服务端的身份。</p><p>服务端要求客户端发送证书，并检查是否通过验证。失败则关闭连接，认证成功则从客户端证书中获得客户端的公钥，一般为 1024 位或者 2048 位。到此，服务器客户端双方的身份认证结束，双方确保身份都是真实可靠的。</p><p><strong>注意：</strong></p><p>(1) 采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问。这套证书其实就是一对公钥和私钥。</p><p>(2) 互联网有太多的服务需要使用证书来验证身份，以至于客户端（操作系统或浏览器等）无法内置所有证书，需要通过服务端将证书发送给客户端。</p><p>(3) 客户端内置的是 CA 的根证书(Root Certificate)，HTTPS 协议中服务器会发送证书链（Certificate Chain）给客户端。</p><p><strong>数据传输的机密性</strong></p><p>客户端和服务端在开始传输数据之前，会协商传输过程需要使用的加密算法。 客户端发送协商请求给服务端, 其中包含自己支持的非对成加密的密钥交换算法 ( 一般是RSA)，数据签名摘要算法 ( 一般是SHA或者MD5) ，加密传输数据的对称加密算法 ( 一般是DES)，以及加密密钥的长度。 服务端接收到消息之后，选中安全性最高的算法，并将选中的算法发送给客户端，完成协商。客户端生成随机的字符串，通过协商好的非对称加密算法，使用服务端的公钥对该字符串进行加密，发送给服务端。 服务端接收到之后，使用自己的私钥解密得到该字符串。在随后的数据传输当中，使用这个字符串作为密钥进行对称加密。</p><p><strong>防止重放攻击</strong></p><p>SSL 使用序列号来保护通讯方免受报文重放攻击。这个序列号被加密后作为数据包的负载。在整个 SSL 握手中，都有一个唯一的随机数来标记 SSL 握手。 这样防止了攻击者嗅探整个登录过程，获取到加密的登录数据之后，不对数据进行解密，而直接重传登录数据包的攻击手法。</p><p>可以看到，鉴于电子商务等安全上的需求，HTTPS 对比 HTTP 协议，在安全方面已经取得了极大的增强。总结来说，HTTPS 的改进点在于创造性的使用了非对称加密算法，在不安全的网路上，安全的传输了用来进行非对称加密的密钥，综合利用了非对称加密的安全性和对称加密的快速性。</p><h1 id="四、HTTPS-的优点"><a href="#四、HTTPS-的优点" class="headerlink" title="四、HTTPS 的优点"></a>四、HTTPS 的优点</h1><p>1、使用 HTTPS 协议可认证用户和服务器，确保数据发送到正确的客户机和服务器。</p><p>2、HTTPS 协议是由SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全，可防止数据在传输过程中不被窃取、修改，确保数据的完整性。</p><p>3、HTTPS 是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p><h1 id="五、HTTPS-的缺点（对比优点）"><a href="#五、HTTPS-的缺点（对比优点）" class="headerlink" title="五、HTTPS 的缺点（对比优点）"></a>五、HTTPS 的缺点（对比优点）</h1><p>1、HTTPS 协议握手阶段比较费时，会使页面的加载时间延长近。</p><p>2、HTTPS 连接缓存不如 HTTP 高效，会增加数据开销，甚至已有的安全措施也会因此而受到影响。</p><p>3、HTTPS 协议的安全是有范围的，在黑客攻击、拒绝服务攻击和服务器劫持等方面几乎起不到什么作用。</p><p>4、SSL 证书通常需要绑定 IP，不能在同一 IP 上绑定多个域名，IPv4 资源不可能支撑这个消耗。</p><p>5、成本增加。部署 HTTPS 后，因为 HTTPS 协议的工作要增加额外的计算资源消耗，例如 SSL 协议加密算法和 SSL 交互次数将占用一定的计算资源和服务器成本。</p><p>6、HTTPS 协议的加密范围也比较有限。最关键的，SSL 证书的信用链体系并不安全，特别是在某些国家可以控制 CA 根证书的情况下，中间人攻击一样可行。</p><h1 id="六、HTTPS-的连接过程"><a href="#六、HTTPS-的连接过程" class="headerlink" title="六、HTTPS 的连接过程"></a>六、HTTPS 的连接过程</h1><p><img src="/./../images/HTTPS%20%E7%9A%84%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B.jpg" alt="HTTPS 的连接过程" title="HTTPS 的连接过程"></p><p>图片中的过程是按 8 个步骤分的，但是网上有更详细的步骤，所以我把详细的过程和这个图片配在一起。</p><p>① 客户端的浏览器向服务器发送请求，并传送客户端 SSL 协议的版本号，加密算法的种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息。</p><p>② 服务器向客户端传送 SSL 协议的版本号，加密算法的种类，随机数以及其他相关信息，同时服务器还将向客户端传送自己的证书。</p><p>③ 客户端利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的 CA 是否可靠，发行者证书的公钥能否正确解开服务器证书的 “发行者的数字签名”，服务器证书上的域名是否和服务器的实际域名相匹配。如果合法性验证没有通过，通讯将断开；如果合法性验证通过，将继续进行第四步。</p><p>④ 用户端随机产生一个用于通讯的 “对称密码”，然后用服务器的公钥（服务器的公钥从步骤②中的服务器的证书中获得）对其加密，然后将加密后的“预主密码”传给服务器。</p><p>⑤ 如果服务器要求客户的身份认证（在握手过程中为可选），用户可以建立一个随机数然后对其进行数据签名，将这个含有签名的随机数和客户自己的证书以及加密过的密钥一起传给服务器。</p><p>⑥ 如果服务器要求客户的身份认证，服务器必须检验客户证书和签名随机数的合法性，具体的合法性验证过程包括：客户的证书使用日期是否有效，为客户提供证书的 CA  是否可靠，发行 CA 的公钥能否正确解开客户证书的发行 CA 的数字签名，检查客户的证书是否在证书废止列表（CRL）中。检验如果没有通过，通讯立刻中断；如果验证通过，服务器将用自己的私钥解开加密的私钥，然后执行一系列步骤来产生主通讯密码（客户端也将通过同样的方法产生相同的主通讯密码）。</p><p>⑦ 服务器和客户端用相同的对称加密密钥，对称密钥用于 SSL 协议的安全数据通讯的加解密通讯。同时在 SSL 通讯过程中还要完成数据通讯的完整性，防止数据通讯中的任何变化。</p><p>⑧ 客户端向服务器端发出信息，指明后面的数据通讯将使用的步骤 ⑦ 中的主密码为对称密钥，同时通知服务器客户端的握手过程结束。</p><p>⑨ 服务器向客户端发出信息，指明后面的数据通讯将使用的步骤 ⑦ 中的主密码为对称密钥，同时通知客户端服务器端的握手过程结束。</p><p>⑩ SSL 的握手部分结束，SSL 安全通道的数据通讯开始，客户和服务器开始使用相同的对称密钥进行数据通讯，同时进行通讯完整性的检验。</p><p><strong>上述的过程需要弄懂的核心思想</strong></p><p><strong>客户端解析证书</strong></p><p>这部分工作是由客户端的 TLS 来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，<strong>那么就生成一个对称加密密钥，然后用公钥对该密钥进行非对称加密。</strong></p><p><strong>传送加密信息</strong></p><p>这部分传送的是用公钥加密后的对称加密密钥，目的就是让服务端得到这个密钥，以后客户端和服务端的通信就可以通过这个密钥来进行加密解密了。</p><p><strong>服务端解密信息</strong></p><p><strong>服务端用非对称加密算法里的私钥解密后，得到了客户端传过来的对称加密算法的私钥，然后把之后传输的内容通过该值进行对称加密。</strong></p><p><strong>为什么用非对称加密协商对称加密密钥</strong></p><p>对称加密的特点：对称密码体制中只有一种密钥，并且是非公开的。如果要解密就得让对方知道密钥，<strong>所以想要保证其安全性就要保证密钥的安全。</strong></p><p>非对称加密的特点：<strong>算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂，而使得加密解密速度没有对称加密解密的速度快。</strong>非对称密钥体制有两种密钥，其中一个是公开的，这样就可以不需要像对称密码那样传输对方的密钥了，这样安全性就大了很多。</p><p>非对称加密公钥和私钥的使用方法：**(1) 公钥加密私钥解密。(2) 私钥做数字签名，公钥验证。**</p><p><strong>补充：</strong></p><p><strong>SSL 提供服务</strong><br>(1) 认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>(2) 加密数据以防止数据中途被窃取；</p><p>(3) 维护数据的完整性，确保数据在传输过程中不被改变。</p><p><strong>SSL 工作流程</strong></p><p><strong>服务器认证阶段：</strong></p><p>(1) 客户端向服务器发送一个开始信息 “Hello” 以便开始一个新的会话连接；</p><p>(2) 服务器根据客户的信息确定是否需要生成新的主密钥，如需要则服务器在响应客户的 “Hello” 信息时将包含生成主密钥所需的信息；</p><p>(3) 客户根据收到的服务器响应信息，产生一个主密钥，并用服务器的公开密钥加密后传给服务器；</p><p>(4) 服务器回复该主密钥，并返回给客户一个用主密钥认证的信息，以此让客户认证服务器。</p><p><strong>用户认证阶段：</strong>在此之前，服务器已经通过了客户认证，这一阶段主要完成对客户的认证。经认证的服务器发送一个提问给客户，客户则返回（数字）签名后的提问和其公开密钥，从而向服务器提供认证。</p><p>SSL 协议提供的安全通道有以下三个特性：</p><p><strong>机密性：</strong>SSL 协议使用密钥加密通信数据。</p><p><strong>可靠性：</strong>服务器和客户都会被认证，客户的认证是可选的。</p><p><strong>完整性：</strong>SSL 协议会对传送的数据进行完整性检查。</p><p><strong>服务器证书</strong>(server certificates)是 SSL 数字证书的一种形式，意指通过提交数字证书来证明您的身份或表明您有权访问在线服务。再者简单来说，通过使用服务器证书可为不同站点提供身份鉴定并保证该站点拥有高强度加密安全。是组成 Web 服务器的 SSL 安全功能的唯一的数字标识。通过相互信任的第三方组织获得，并为用户提供验证您 Web 站点身份的手段。服务器证书包含详细的身份验证信息，如服务器内容附属的组织、颁发证书的组织以及称为公开密钥的唯一的身份验证文件。</p><p>————————————————</p><p>版权声明：本文为CSDN博主「Tyler_Zx」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_38289815/article/details/80969419">https://blog.csdn.net/qq_38289815/article/details/80969419</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、HTTP-与-HTTPS-的基本概念&quot;&gt;&lt;a href=&quot;#一、HTTP-与-HTTPS-的基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、HTTP 与 HTTPS 的基本概念&quot;&gt;&lt;/a&gt;一、HTTP 与 HTTPS 的基本概念&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="面试题" scheme="https://hiro-lin.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="HTTP" scheme="https://hiro-lin.github.io/tags/HTTP/"/>
    
    <category term="HTTPS" scheme="https://hiro-lin.github.io/tags/HTTPS/"/>
    
  </entry>
  
</feed>
